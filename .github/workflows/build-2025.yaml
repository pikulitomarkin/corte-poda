name: 🎯 Build APK - Corte de Matos FIXED V16

on:
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

jobs:
  build:
    name: 📱 Build Corte de Matos App
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 📦 Install dependencies
        run: |
          echo "📦 Instalando dependências para Corte de Matos..."
          npm ci --legacy-peer-deps --no-audit --no-fund

      - name: 🔧 Setup Expo and EAS CLI
        run: |
          echo "🔧 Instalando CLIs..."
          npm install -g @expo/cli@latest eas-cli@latest
          echo "✅ Versões:"
          npx expo --version
          npx eas --version

      - name: 🔐 Authenticate with Expo
        run: |
          echo "🔐 Autenticando com Expo..."
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🖼️ Create App Assets
        run: |
          echo "🖼️ Criando assets para o app Corte de Matos..."
          
          mkdir -p assets
          
          # Criar ícones usando Python (tema verde/matos)
          cat > create_assets.py << 'EOF'
          from PIL import Image, ImageDraw
          
          # Ícone 1024x1024 - tema corte de matos
          size = 1024
          img = Image.new('RGB', (size, size), color='#4CAF50')  # Verde
          draw = ImageDraw.Draw(img)
          
          # Círculo interno mais escuro
          margin = 100
          draw.ellipse([margin, margin, size-margin, size-margin], fill='#2E7D32')
          
          # Símbolo de corte (duas linhas cruzadas)
          center = size // 2
          line_width = 30
          line_length = 300
          
          # Linha diagonal 1
          draw.line([center-line_length//2, center-line_length//2, 
                    center+line_length//2, center+line_length//2], 
                    fill='white', width=line_width)
          
          # Linha diagonal 2
          draw.line([center+line_length//2, center-line_length//2, 
                    center-line_length//2, center+line_length//2], 
                    fill='white', width=line_width)
          
          # Salvar ícones
          img.save('assets/icon.png')
          img.save('assets/adaptive-icon.png')
          img.save('assets/favicon.png')
          
          # Splash screen
          splash = Image.new('RGB', (size, size), color='#4CAF50')
          splash.save('assets/splash.png')
          
          print("✅ Assets do Corte de Matos criados!")
          EOF
          
          # Tentar criar com PIL, senão usar fallback
          pip3 install Pillow 2>/dev/null && python3 create_assets.py || {
            echo "📱 Usando assets básicos..."
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAC0lEQVQIHWNgAAIAAAUAAY27m/MAAAAASUVORK5CYII=" | base64 -d > assets/icon.png
            cp assets/icon.png assets/adaptive-icon.png
            cp assets/icon.png assets/splash.png
            cp assets/icon.png assets/favicon.png
          }
          
          echo "✅ Assets criados!"
          ls -la assets/

      - name: 📱 Create Corte de Matos App.js
        run: |
          echo "📱 Criando App.js com funcionalidades do Corte de Matos..."
          
          cat > App.js << 'EOF'
          import React, { useState } from 'react';
          import {
            View,
            Text,
            StyleSheet,
            SafeAreaView,
            TouchableOpacity,
            Alert,
            ScrollView,
            Modal,
            TextInput,
            Platform
          } from 'react-native';
          import { StatusBar } from 'expo-status-bar';
          
          export default function App() {
            const [vaos, setVaos] = useState([
              {
                id: 1,
                descricao: 'Vão Principal - Linha A',
                localizacao: 'Setor Norte - KM 15',
                area: '150m²',
                dataNecessidade: '2025-02-15',
                status: 'pendente',
                dataInicio: null,
                dataConclusao: null
              }
            ]);
            const [modalVisible, setModalVisible] = useState(false);
            const [novoVao, setNovoVao] = useState({
              descricao: '',
              localizacao: '',
              area: '',
              dataNecessidade: ''
            });
            
            // Adicionar novo vão
            const adicionarVao = () => {
              if (!novoVao.descricao.trim()) {
                Alert.alert('Erro', 'Descrição é obrigatória');
                return;
              }
              
              const vao = {
                id: Date.now(),
                ...novoVao,
                status: 'pendente',
                dataInicio: null,
                dataConclusao: null
              };
              
              setVaos([...vaos, vao]);
              setNovoVao({ descricao: '', localizacao: '', area: '', dataNecessidade: '' });
              setModalVisible(false);
              Alert.alert('Sucesso', 'Vão de corte adicionado!');
            };
            
            // Alterar status do vão
            const alterarStatus = (id, novoStatus) => {
              setVaos(vaos.map(vao => {
                if (vao.id === id) {
                  const agora = new Date().toISOString().split('T')[0];
                  return {
                    ...vao,
                    status: novoStatus,
                    dataInicio: novoStatus === 'iniciado' ? agora : vao.dataInicio,
                    dataConclusao: novoStatus === 'concluido' ? agora : null
                  };
                }
                return vao;
              }));
            };
            
            // Cores do sistema de status
            const getCorStatus = (status) => {
              switch(status) {
                case 'pendente': return '#9E9E9E';  // Cinza
                case 'iniciado': return '#FF9800';  // Amarelo
                case 'concluido': return '#4CAF50'; // Verde
                default: return '#9E9E9E';
              }
            };
            
            // Ícones de alerta de prazo
            const getIconePrazo = (vao) => {
              const hoje = new Date();
              const dataNecessidade = new Date(vao.dataNecessidade);
              const diasRestantes = Math.ceil((dataNecessidade - hoje) / (1000 * 60 * 60 * 24));
              
              if (vao.status === 'concluido') return '✅';
              if (diasRestantes < 0) return '⚠️'; // Atrasado
              if (diasRestantes <= 7) return '🕐'; // Urgente
              return '📅'; // Normal
            };
            
            // Estatísticas
            const contarStatus = () => {
              const pendentes = vaos.filter(v => v.status === 'pendente').length;
              const iniciados = vaos.filter(v => v.status === 'iniciado').length;
              const concluidos = vaos.filter(v => v.status === 'concluido').length;
              return { pendentes, iniciados, concluidos };
            };
            
            const stats = contarStatus();
            
            return (
              <SafeAreaView style={styles.container}>
                <StatusBar style="light" backgroundColor="#2E7D32" />
                
                {/* Header */}
                <View style={styles.header}>
                  <Text style={styles.title}>🌿 Corte de Matos</Text>
                  <Text style={styles.subtitle}>Controle de Vãos - Sistema Elétrico</Text>
                </View>
                
                {/* Estatísticas */}
                <View style={styles.statsContainer}>
                  <View style={styles.statBox}>
                    <Text style={styles.statNumber}>{stats.pendentes}</Text>
                    <Text style={styles.statLabel}>Pendentes</Text>
                  </View>
                  <View style={styles.statBox}>
                    <Text style={[styles.statNumber, {color: '#FF9800'}]}>{stats.iniciados}</Text>
                    <Text style={styles.statLabel}>Iniciados</Text>
                  </View>
                  <View style={styles.statBox}>
                    <Text style={[styles.statNumber, {color: '#4CAF50'}]}>{stats.concluidos}</Text>
                    <Text style={styles.statLabel}>Concluídos</Text>
                  </View>
                </View>
                
                {/* Botão Adicionar */}
                <TouchableOpacity 
                  style={styles.addButton} 
                  onPress={() => setModalVisible(true)}
                >
                  <Text style={styles.addButtonText}>➕ Adicionar Vão de Corte</Text>
                </TouchableOpacity>
                
                {/* Lista de Vãos */}
                <ScrollView style={styles.lista}>
                  {vaos.map((vao) => (
                    <View key={vao.id} style={[styles.vaoCard, { borderLeftColor: getCorStatus(vao.status) }]}>
                      <View style={styles.vaoHeader}>
                        <Text style={styles.vaoIcon}>{getIconePrazo(vao)}</Text>
                        <Text style={styles.vaoDescricao}>{vao.descricao}</Text>
                      </View>
                      
                      <Text style={styles.vaoInfo}>📍 {vao.localizacao}</Text>
                      <Text style={styles.vaoInfo}>📏 Área: {vao.area}</Text>
                      <Text style={styles.vaoInfo}>📅 Prazo: {vao.dataNecessidade}</Text>
                      
                      <View style={styles.statusContainer}>
                        <Text style={[styles.status, { color: getCorStatus(vao.status) }]}>
                          ● {vao.status.toUpperCase()}
                        </Text>
                      </View>
                      
                      {/* Botões de Ação */}
                      <View style={styles.actionButtons}>
                        {vao.status === 'pendente' && (
                          <TouchableOpacity 
                            style={[styles.actionBtn, {backgroundColor: '#FF9800'}]}
                            onPress={() => alterarStatus(vao.id, 'iniciado')}
                          >
                            <Text style={styles.actionBtnText}>▶️ Iniciar Corte</Text>
                          </TouchableOpacity>
                        )}
                        
                        {vao.status === 'iniciado' && (
                          <TouchableOpacity 
                            style={[styles.actionBtn, {backgroundColor: '#4CAF50'}]}
                            onPress={() => alterarStatus(vao.id, 'concluido')}
                          >
                            <Text style={styles.actionBtnText}>✅ Finalizar Corte</Text>
                          </TouchableOpacity>
                        )}
                        
                        {vao.status === 'concluido' && (
                          <View style={[styles.actionBtn, {backgroundColor: '#4CAF50'}]}>
                            <Text style={styles.actionBtnText}>✅ Corte Finalizado</Text>
                          </View>
                        )}
                      </View>
                    </View>
                  ))}
                  
                  {vaos.length === 0 && (
                    <View style={styles.emptyContainer}>
                      <Text style={styles.emptyText}>
                        🌿 Nenhum vão de corte cadastrado{'\n'}
                        Toque no botão acima para adicionar
                      </Text>
                    </View>
                  )}
                </ScrollView>
                
                {/* Modal Adicionar Vão */}
                <Modal
                  animationType="slide"
                  transparent={true}
                  visible={modalVisible}
                  onRequestClose={() => setModalVisible(false)}
                >
                  <View style={styles.modalOverlay}>
                    <View style={styles.modalContent}>
                      <Text style={styles.modalTitle}>Novo Vão de Corte</Text>
                      
                      <TextInput
                        style={styles.input}
                        placeholder="Descrição do vão (ex: Vão Principal - Linha A)"
                        value={novoVao.descricao}
                        onChangeText={(text) => setNovoVao({...novoVao, descricao: text})}
                      />
                      
                      <TextInput
                        style={styles.input}
                        placeholder="Localização (ex: Setor Norte - KM 15)"
                        value={novoVao.localizacao}
                        onChangeText={(text) => setNovoVao({...novoVao, localizacao: text})}
                      />
                      
                      <TextInput
                        style={styles.input}
                        placeholder="Área (ex: 150m²)"
                        value={novoVao.area}
                        onChangeText={(text) => setNovoVao({...novoVao, area: text})}
                      />
                      
                      <TextInput
                        style={styles.input}
                        placeholder="Data necessidade (AAAA-MM-DD)"
                        value={novoVao.dataNecessidade}
                        onChangeText={(text) => setNovoVao({...novoVao, dataNecessidade: text})}
                      />
                      
                      <View style={styles.modalButtons}>
                        <TouchableOpacity 
                          style={[styles.modalBtn, {backgroundColor: '#f44336'}]}
                          onPress={() => setModalVisible(false)}
                        >
                          <Text style={styles.modalBtnText}>Cancelar</Text>
                        </TouchableOpacity>
                        
                        <TouchableOpacity 
                          style={[styles.modalBtn, {backgroundColor: '#4CAF50'}]}
                          onPress={adicionarVao}
                        >
                          <Text style={styles.modalBtnText}>Adicionar</Text>
                        </TouchableOpacity>
                      </View>
                    </View>
                  </View>
                </Modal>
                
                {/* Footer */}
                <View style={styles.footer}>
                  <Text style={styles.footerText}>
                    Corte de Matos v1.0 - Total: {vaos.length} vãos
                  </Text>
                </View>
              </SafeAreaView>
            );
          }
          
          const styles = StyleSheet.create({
            container: {
              flex: 1,
              backgroundColor: '#f5f5f5',
            },
            header: {
              backgroundColor: '#2E7D32',
              padding: 20,
              alignItems: 'center',
              ...Platform.select({
                ios: { paddingTop: 50 },
                android: { paddingTop: 20 },
              }),
            },
            title: {
              fontSize: 24,
              fontWeight: 'bold',
              color: 'white',
            },
            subtitle: {
              fontSize: 14,
              color: '#C8E6C9',
              marginTop: 5,
            },
            statsContainer: {
              flexDirection: 'row',
              backgroundColor: 'white',
              margin: 15,
              borderRadius: 10,
              padding: 15,
              elevation: 3,
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 2 },
              shadowOpacity: 0.1,
              shadowRadius: 3,
            },
            statBox: {
              flex: 1,
              alignItems: 'center',
            },
            statNumber: {
              fontSize: 24,
              fontWeight: 'bold',
              color: '#333',
            },
            statLabel: {
              fontSize: 12,
              color: '#666',
              marginTop: 5,
            },
            addButton: {
              backgroundColor: '#4CAF50',
              margin: 15,
              padding: 15,
              borderRadius: 10,
              alignItems: 'center',
              elevation: 3,
            },
            addButtonText: {
              color: 'white',
              fontSize: 16,
              fontWeight: 'bold',
            },
            lista: {
              flex: 1,
              paddingHorizontal: 15,
            },
            vaoCard: {
              backgroundColor: 'white',
              marginBottom: 15,
              borderRadius: 10,
              padding: 15,
              borderLeftWidth: 5,
              elevation: 2,
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 1 },
              shadowOpacity: 0.1,
              shadowRadius: 2,
            },
            vaoHeader: {
              flexDirection: 'row',
              alignItems: 'center',
              marginBottom: 10,
            },
            vaoIcon: {
              fontSize: 20,
              marginRight: 10,
            },
            vaoDescricao: {
              fontSize: 16,
              fontWeight: 'bold',
              color: '#333',
              flex: 1,
            },
            vaoInfo: {
              fontSize: 14,
              color: '#666',
              marginBottom: 5,
            },
            statusContainer: {
              marginVertical: 10,
            },
            status: {
              fontSize: 14,
              fontWeight: 'bold',
            },
            actionButtons: {
              marginTop: 10,
            },
            actionBtn: {
              padding: 10,
              borderRadius: 5,
              alignItems: 'center',
            },
            actionBtnText: {
              color: 'white',
              fontWeight: 'bold',
            },
            emptyContainer: {
              alignItems: 'center',
              marginTop: 50,
            },
            emptyText: {
              fontSize: 16,
              color: '#999',
              textAlign: 'center',
              lineHeight: 24,
            },
            modalOverlay: {
              flex: 1,
              backgroundColor: 'rgba(0,0,0,0.5)',
              justifyContent: 'center',
              alignItems: 'center',
            },
            modalContent: {
              backgroundColor: 'white',
              margin: 20,
              padding: 20,
              borderRadius: 10,
              width: '90%',
            },
            modalTitle: {
              fontSize: 18,
              fontWeight: 'bold',
              marginBottom: 20,
              textAlign: 'center',
            },
            input: {
              borderWidth: 1,
              borderColor: '#ddd',
              padding: 10,
              marginBottom: 15,
              borderRadius: 5,
              fontSize: 16,
            },
            modalButtons: {
              flexDirection: 'row',
              justifyContent: 'space-between',
            },
            modalBtn: {
              flex: 1,
              padding: 15,
              marginHorizontal: 5,
              borderRadius: 5,
              alignItems: 'center',
            },
            modalBtnText: {
              color: 'white',
              fontWeight: 'bold',
            },
            footer: {
              padding: 15,
              alignItems: 'center',
              borderTopWidth: 1,
              borderTopColor: '#eee',
              backgroundColor: 'white',
            },
            footerText: {
              color: '#666',
              fontSize: 12,
            },
          });
          EOF
          
          echo "✅ App.js do Corte de Matos criado!"

      - name: 📝 Create Fixed app.json (SDK 50+ compliant)
        run: |
          echo "📝 Criando app.json corrigido para SDK 50+..."
          
          cat > app.json << 'EOF'
          {
            "expo": {
              "name": "Corte de Matos",
              "slug": "corte-matos-app",
              "version": "1.0.4",
              "orientation": "portrait",
              "icon": "./assets/icon.png",
              "userInterfaceStyle": "light",
              "splash": {
                "image": "./assets/splash.png",
                "resizeMode": "contain",
                "backgroundColor": "#4CAF50"
              },
              "assetBundlePatterns": [
                "**/*"
              ],
              "ios": {
                "supportsTablet": true
              },
              "android": {
                "adaptiveIcon": {
                  "foregroundImage": "./assets/adaptive-icon.png",
                  "backgroundColor": "#4CAF50"
                },
                "package": "com.pikulito.cortematos",
                "versionCode": 4,
                "permissions": []
              },
              "web": {
                "favicon": "./assets/favicon.png"
              },
              "extra": {
                "eas": {
                  "projectId": "84ea4587-b864-4560-a167-05855903311c"
                }
              },
              "owner": "pikulito"
            }
          }
          EOF
          
          echo "✅ app.json SDK 50+ compliant criado!"

      - name: 🔧 Create Metro Config
        run: |
          echo "🔧 Criando metro.config.js que estende @expo/metro-config..."
          
          cat > metro.config.js << 'EOF'
          const { getDefaultConfig } = require('@expo/metro-config');
          
          const config = getDefaultConfig(__dirname);
          
          module.exports = config;
          EOF
          
          echo "✅ metro.config.js criado!"

      - name: 📦 Update to Expo SDK 50+
        run: |
          echo "📦 Atualizando para Expo SDK 50+..."
          
          # Atualizar dependências para SDK 50+
          npx expo install --fix
          
          echo "✅ SDK atualizado!"

      - name: 🔍 Verify secrets
        run: |
          echo "🔍 Verificando secrets..."
          
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "❌ EXPO_TOKEN não configurado!"
            exit 1
          fi
          if [ -z "${{ secrets.ANDROID_KEYSTORE }}" ]; then
            echo "❌ ANDROID_KEYSTORE não configurado!"
            exit 1
          fi
          if [ -z "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" ]; then
            echo "❌ ANDROID_KEYSTORE_PASSWORD não configurado!"
            exit 1
          fi
          if [ -z "${{ secrets.ANDROID_KEY_ALIAS }}" ]; then
            echo "❌ ANDROID_KEY_ALIAS não configurado!"
            exit 1
          fi
          if [ -z "${{ secrets.ANDROID_KEY_PASSWORD }}" ]; then
            echo "❌ ANDROID_KEY_PASSWORD não configurado!"
            exit 1
          fi
          
          echo "✅ Todas as secrets configuradas!"

      - name: 🔑 Setup Keystore
        run: |
          echo "🔑 Configurando keystore..."
          
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > my-release-key.jks
          
          # Detectar alias real
          REAL_ALIAS=$(keytool -list -keystore my-release-key.jks -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" 2>/dev/null | grep "PrivateKeyEntry" | head -1 | cut -d',' -f1 | tr -d ' ' || echo "${{ secrets.ANDROID_KEY_ALIAS }}")
          
          cat > credentials.json << EOF
          {
            "android": {
              "keystore": {
                "keystorePath": "./my-release-key.jks",
                "keystorePassword": "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}",
                "keyAlias": "$REAL_ALIAS",
                "keyPassword": "${{ secrets.ANDROID_KEY_PASSWORD }}"
              }
            }
          }
          EOF
          
          echo "✅ Keystore configurado!"
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: 🔧 Configure EAS
        run: |
          echo "🔧 Configurando EAS..."
          
          cat > eas.json << 'EOF'
          {
            "cli": {
              "version": ">= 7.8.6",
              "appVersionSource": "local"
            },
            "build": {
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "credentialsSource": "local"
                }
              },
              "production": {
                "android": {
                  "buildType": "app-bundle",
                  "credentialsSource": "local"
                }
              }
            }
          }
          EOF
          
          npx eas init --id 84ea4587-b864-4560-a167-05855903311c --force --non-interactive
          
          echo "✅ EAS configurado!"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🩺 Run Expo Doctor
        run: |
          echo "🩺 Executando expo doctor..."
          npx expo doctor || echo "Algumas verificações podem falhar, continuando..."

      - name: 🔨 Build Corte de Matos APK
        run: |
          echo "🔨 Building APK do Corte de Matos..."
          echo "📱 Profile: ${{ github.event.inputs.profile }}"
          
          npx eas build --platform android --profile ${{ github.event.inputs.profile }} --non-interactive --wait
          
          echo "🎉 Build do Corte de Matos concluído!"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: ✅ Build Status
        if: always()
        run: |
          echo "📋 Status do build Corte de Matos:"
          echo ""
          echo "🌿 FUNCIONALIDADES IMPLEMENTADAS:"
          echo "  ✅ Sistema de cores (Cinza/Amarelo/Verde)"
          echo "  ✅ Alertas de prazo (🕐 urgente, ⚠️ atrasado)"
          echo "  ✅ Controle de status dos vãos"
          echo "  ✅ Modal para adicionar vãos"
          echo "  ✅ Estatísticas em tempo real"
          echo "  ✅ Interface temática verde"
          echo ""
          
          npx eas build:list --platform android --limit 3 || echo "Lista indisponível"
          echo ""
          echo "🔗 https://expo.dev/accounts/pikulito/projects/corte-matos-app/builds"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}