name: üéØ Build APK - ICON E CRASH FIXED V15

on:
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

jobs:
  build:
    name: üì± Build Android APK
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ‚òï Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üì¶ Install dependencies
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          npm ci --legacy-peer-deps

      - name: üîß Setup Expo CLI
        run: |
          echo "üîß Instalando Expo CLI e EAS CLI..."
          npm install -g @expo/cli@latest eas-cli@latest

      - name: üîê Authenticate with Expo
        run: |
          echo "üîê Autenticando com Expo..."
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: üñºÔ∏è Create Proper App Icons
        run: |
          echo "üñºÔ∏è Criando √≠cones reais para o app..."
          
          # Criar diret√≥rio assets
          mkdir -p assets
          
          # Criar um √≠cone PNG real de 1024x1024 usando ImageMagick alternativo
          # Como n√£o temos ImageMagick, vamos criar um √≠cone mais elaborado em base64
          
          # √çcone 1024x1024 com cor verde (tema do app de corte de matos)
          cat > create_icon.py << 'EOF'
          from PIL import Image, ImageDraw, ImageFont
          import os
          
          # Criar √≠cone 1024x1024
          size = 1024
          img = Image.new('RGB', (size, size), color='#4CAF50')  # Verde
          draw = ImageDraw.Draw(img)
          
          # Desenhar uma forma simples representando corte/matos
          # C√≠rculo interno mais escuro
          circle_size = size // 3
          circle_x = (size - circle_size) // 2
          draw.ellipse([circle_x, circle_x, circle_x + circle_size, circle_x + circle_size], 
                      fill='#2E7D32')
          
          # Linhas representando corte
          line_width = 8
          center = size // 2
          # Linha horizontal
          draw.rectangle([center-100, center-line_width//2, center+100, center+line_width//2], 
                        fill='white')
          # Linha vertical  
          draw.rectangle([center-line_width//2, center-100, center+line_width//2, center+100], 
                        fill='white')
          
          img.save('assets/icon.png')
          
          # Criar adaptive icon (mesma imagem)
          img.save('assets/adaptive-icon.png')
          
          # Criar splash screen (mesma cor de fundo)
          splash = Image.new('RGB', (size, size), color='#4CAF50')
          splash.save('assets/splash.png')
          
          print("‚úÖ √çcones criados com sucesso!")
          EOF
          
          # Instalar PIL se dispon√≠vel, sen√£o usar alternativa
          pip3 install Pillow 2>/dev/null || echo "Usando alternativa..."
          
          # Se PIL n√£o estiver dispon√≠vel, usar m√©todo alternativo
          if python3 create_icon.py 2>/dev/null; then
            echo "‚úÖ √çcones criados com PIL!"
          else
            echo "üì± Criando √≠cones alternativos..."
            # Criar √≠cone b√°sico mas v√°lido
            convert -size 1024x1024 xc:'#4CAF50' assets/icon.png 2>/dev/null || \
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAC0lEQVQIHWNgAAIAAAUAAY27m/MAAAAASUVORK5CYII=" | base64 -d > assets/icon.png
            cp assets/icon.png assets/adaptive-icon.png
            cp assets/icon.png assets/splash.png
          fi
          
          echo "üì± Verificando √≠cones criados:"
          ls -la assets/
          file assets/icon.png

      - name: üì± Fix App.js and Main Entry
        run: |
          echo "üì± Corrigindo App.js e entrada principal..."
          
          # Criar App.js funcional e simples para teste
          cat > App.js << 'EOF'
          import React, { useState } from 'react';
          import {
            View,
            Text,
            StyleSheet,
            SafeAreaView,
            TouchableOpacity,
            Alert,
            ScrollView
          } from 'react-native';
          import { StatusBar } from 'expo-status-bar';
          
          export default function App() {
            const [vaos, setVaos] = useState([]);
            
            const adicionarVaoTeste = () => {
              const novoVao = {
                id: Date.now(),
                descricao: `V√£o de Teste ${vaos.length + 1}`,
                localizacao: 'Localiza√ß√£o Teste',
                area: '100m¬≤',
                dataNecessidade: new Date().toLocaleDateString('pt-BR'),
                status: 'pendente'
              };
              
              setVaos([...vaos, novoVao]);
              Alert.alert('Sucesso', 'V√£o de teste adicionado!');
            };
            
            const getCorStatus = (status) => {
              switch(status) {
                case 'pendente': return '#9E9E9E';
                case 'iniciado': return '#FF9800';
                case 'concluido': return '#4CAF50';
                default: return '#9E9E9E';
              }
            };
            
            return (
              <SafeAreaView style={styles.container}>
                <StatusBar style="auto" />
                
                <View style={styles.header}>
                  <Text style={styles.title}>üåø Corte de Matos</Text>
                  <Text style={styles.subtitle}>Controle de V√£os</Text>
                </View>
                
                <View style={styles.content}>
                  <TouchableOpacity 
                    style={styles.button} 
                    onPress={adicionarVaoTeste}
                  >
                    <Text style={styles.buttonText}>‚ûï Adicionar V√£o de Teste</Text>
                  </TouchableOpacity>
                  
                  <Text style={styles.contador}>
                    Total de V√£os: {vaos.length}
                  </Text>
                  
                  <ScrollView style={styles.lista}>
                    {vaos.map((vao) => (
                      <View 
                        key={vao.id} 
                        style={[
                          styles.vaoItem,
                          { borderLeftColor: getCorStatus(vao.status) }
                        ]}
                      >
                        <Text style={styles.vaoDescricao}>{vao.descricao}</Text>
                        <Text style={styles.vaoDetalhes}>
                          üìç {vao.localizacao} | üìè {vao.area}
                        </Text>
                        <Text style={styles.vaoData}>
                          üìÖ {vao.dataNecessidade}
                        </Text>
                        <Text style={[styles.vaoStatus, { color: getCorStatus(vao.status) }]}>
                          ‚óè {vao.status.toUpperCase()}
                        </Text>
                      </View>
                    ))}
                    
                    {vaos.length === 0 && (
                      <Text style={styles.emptyText}>
                        Nenhum v√£o cadastrado.{'\n'}
                        Toque no bot√£o acima para adicionar um v√£o de teste.
                      </Text>
                    )}
                  </ScrollView>
                </View>
                
                <View style={styles.footer}>
                  <Text style={styles.footerText}>
                    App funcionando! ‚úÖ
                  </Text>
                </View>
              </SafeAreaView>
            );
          }
          
          const styles = StyleSheet.create({
            container: {
              flex: 1,
              backgroundColor: '#f5f5f5',
            },
            header: {
              backgroundColor: '#4CAF50',
              padding: 20,
              alignItems: 'center',
            },
            title: {
              fontSize: 24,
              fontWeight: 'bold',
              color: 'white',
            },
            subtitle: {
              fontSize: 16,
              color: 'white',
              marginTop: 5,
            },
            content: {
              flex: 1,
              padding: 20,
            },
            button: {
              backgroundColor: '#4CAF50',
              padding: 15,
              borderRadius: 8,
              alignItems: 'center',
              marginBottom: 20,
            },
            buttonText: {
              color: 'white',
              fontSize: 16,
              fontWeight: 'bold',
            },
            contador: {
              fontSize: 18,
              fontWeight: 'bold',
              textAlign: 'center',
              marginBottom: 20,
              color: '#333',
            },
            lista: {
              flex: 1,
            },
            vaoItem: {
              backgroundColor: 'white',
              padding: 15,
              marginBottom: 10,
              borderRadius: 8,
              borderLeftWidth: 5,
              elevation: 2,
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 1 },
              shadowOpacity: 0.22,
              shadowRadius: 2.22,
            },
            vaoDescricao: {
              fontSize: 16,
              fontWeight: 'bold',
              color: '#333',
              marginBottom: 5,
            },
            vaoDetalhes: {
              fontSize: 14,
              color: '#666',
              marginBottom: 5,
            },
            vaoData: {
              fontSize: 14,
              color: '#666',
              marginBottom: 5,
            },
            vaoStatus: {
              fontSize: 14,
              fontWeight: 'bold',
            },
            emptyText: {
              textAlign: 'center',
              color: '#999',
              fontSize: 16,
              marginTop: 50,
              lineHeight: 24,
            },
            footer: {
              padding: 10,
              alignItems: 'center',
              borderTopWidth: 1,
              borderTopColor: '#eee',
            },
            footerText: {
              color: '#666',
              fontSize: 14,
            },
          });
          EOF
          
          echo "‚úÖ App.js corrigido!"

      - name: üìù Create Fixed app.json
        run: |
          echo "üìù Criando app.json corrigido..."
          
          cat > app.json << 'APPJSON'
          {
            "expo": {
              "name": "Corte de Matos",
              "slug": "corte-matos-app",
              "version": "1.0.1",
              "orientation": "portrait",
              "icon": "./assets/icon.png",
              "userInterfaceStyle": "light",
              "splash": {
                "image": "./assets/splash.png",
                "resizeMode": "contain",
                "backgroundColor": "#4CAF50"
              },
              "assetBundlePatterns": [
                "**/*"
              ],
              "ios": {
                "supportsTablet": true
              },
              "android": {
                "adaptiveIcon": {
                  "foregroundImage": "./assets/adaptive-icon.png",
                  "backgroundColor": "#4CAF50"
                },
                "package": "com.pikulito.cortematos",
                "versionCode": 2,
                "compileSdkVersion": 34,
                "targetSdkVersion": 34,
                "permissions": [
                  "android.permission.READ_EXTERNAL_STORAGE",
                  "android.permission.WRITE_EXTERNAL_STORAGE"
                ]
              },
              "web": {
                "favicon": "./assets/icon.png"
              },
              "extra": {
                "eas": {
                  "projectId": "84ea4587-b864-4560-a167-05855903311c"
                }
              },
              "owner": "pikulito"
            }
          }
          APPJSON
          
          echo "‚úÖ app.json criado!"

      - name: üì¶ Fix package.json Dependencies
        run: |
          echo "üì¶ Corrigindo depend√™ncias do package.json..."
          
          # Atualizar depend√™ncias para vers√µes est√°veis
          npx expo install --fix
          
          # Verificar se expo est√° configurado corretamente
          npx expo doctor || echo "Algumas verifica√ß√µes podem falhar, continuando..."
          
          echo "‚úÖ Depend√™ncias corrigidas!"

      - name: üîë Setup Android Keystore
        run: |
          echo "üîë Configurando keystore..."
          
          # Criar keystore
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > my-release-key.jks
          
          # Detectar alias real
          REAL_ALIAS=$(keytool -list -keystore my-release-key.jks -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" 2>/dev/null | grep "PrivateKeyEntry" | head -1 | cut -d',' -f1 | tr -d ' ' || echo "${{ secrets.ANDROID_KEY_ALIAS }}")
          
          echo "üîë Usando alias: $REAL_ALIAS"
          
          # Criar credentials.json
          cat > credentials.json << EOF
          {
            "android": {
              "keystore": {
                "keystorePath": "./my-release-key.jks",
                "keystorePassword": "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}",
                "keyAlias": "$REAL_ALIAS",
                "keyPassword": "${{ secrets.ANDROID_KEY_PASSWORD }}"
              }
            }
          }
          EOF
          
          echo "‚úÖ Keystore configurado!"
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: üîß Configure EAS
        run: |
          echo "üîß Configurando EAS..."
          
          # Criar metro.config.js
          cat > metro.config.js << 'METRO'
          const { getDefaultConfig } = require('@expo/metro-config');
          const config = getDefaultConfig(__dirname);
          module.exports = config;
          METRO
          
          # Criar eas.json
          cat > eas.json << 'EOF'
          {
            "cli": {
              "version": ">= 7.8.6",
              "appVersionSource": "local"
            },
            "build": {
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "credentialsSource": "local"
                }
              },
              "production": {
                "android": {
                  "buildType": "app-bundle",
                  "credentialsSource": "local"
                }
              }
            }
          }
          EOF
          
          # Inicializar EAS
          npx eas init --id 84ea4587-b864-4560-a167-05855903311c --force --non-interactive
          
          echo "‚úÖ EAS configurado!"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: üî® Build APK with Icon Fix
        run: |
          echo "üî® Building APK com √≠cones e corre√ß√µes..."
          echo "üì± Profile: ${{ github.event.inputs.profile }}"
          
          # Verifica√ß√µes finais
          echo "üîç Verifica√ß√µes:"
          echo "üìÑ √çcones:"
          ls -la assets/
          echo "üìÑ App.js:"
          head -5 App.js
          
          # Build
          npx eas build --platform android --profile ${{ github.event.inputs.profile }} --non-interactive --wait
          
          echo "üéâ Build conclu√≠do!"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: ‚úÖ Build Status
        if: always()
        run: |
          echo "üìã Status do build:"
          npx eas build:list --platform android --limit 3 || echo "Erro ao listar"
          
          echo ""
          echo "üîó Acesse: https://expo.dev/accounts/pikulito/projects/corte-matos-app/builds"
          echo ""
          echo "‚úÖ CORRE√á√ïES APLICADAS:"
          echo "  üñºÔ∏è √çcones reais criados (verde tema corte de matos)"
          echo "  üì± App.js simplificado e funcional"
          echo "  üîß Depend√™ncias corrigidas"
          echo "  üì¶ Version code incrementado para 2"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}