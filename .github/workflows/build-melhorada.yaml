name: 🌿 Build APK - Corte de Matos (COMPLETO)

on:
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

jobs:
  build:
    name: 📱 Build Android APK - Corte de Matos
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 📦 Install dependencies
        run: |
          echo "📦 Instalando dependências..."
          npm ci --legacy-peer-deps

      - name: 🔧 Setup Expo CLI
        run: |
          echo "🔧 Instalando Expo CLI e EAS CLI..."
          npm install -g @expo/cli@latest eas-cli@latest

      - name: 🔐 Authenticate with Expo
        run: |
          echo "🔐 Autenticando com Expo..."
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🖼️ Create App Assets
        run: |
          echo "🖼️ Criando assets para o app Corte de Matos..."
          
          mkdir -p assets
          
          # Criar ícones usando Python (tema verde/matos)
          cat > create_assets.py << 'EOF'
          from PIL import Image, ImageDraw
          
          # Ícone 1024x1024 - tema corte de matos
          size = 1024
          img = Image.new('RGB', (size, size), color='#4CAF50')  # Verde
          draw = ImageDraw.Draw(img)
          
          # Círculo interno mais escuro
          margin = 100
          draw.ellipse([margin, margin, size-margin, size-margin], fill='#2E7D32')
          
          # Símbolo de corte (duas linhas cruzadas)
          center = size // 2
          line_width = 30
          line_length = 300
          
          # Linha diagonal 1
          draw.line([center-line_length//2, center-line_length//2, 
                    center+line_length//2, center+line_length//2], 
                    fill='white', width=line_width)
          
          # Linha diagonal 2
          draw.line([center+line_length//2, center-line_length//2, 
                    center-line_length//2, center+line_length//2], 
                    fill='white', width=line_width)
          
          # Salvar ícones
          img.save('assets/icon.png')
          img.save('assets/adaptive-icon.png')
          img.save('assets/favicon.png')
          
          # Splash screen
          splash = Image.new('RGB', (size, size), color='#4CAF50')
          splash.save('assets/splash.png')
          
          print("✅ Assets do Corte de Matos criados!")
          EOF
          
          # Tentar criar com PIL, senão usar fallback
          pip3 install Pillow 2>/dev/null && python3 create_assets.py || {
            echo "📱 Usando assets básicos..."
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAC0lEQVQIHWNgAAIAAAUAAY27m/MAAAAASUVORK5CYII=" | base64 -d > assets/icon.png
            cp assets/icon.png assets/adaptive-icon.png
            cp assets/icon.png assets/splash.png
            cp assets/icon.png assets/favicon.png
          }
          
          echo "✅ Assets criados!"

      - name: 📦 Install Additional Dependencies
        run: |
          echo "📦 Instalando dependências adicionais..."
          npm install xlsx@latest react-native-elements@latest
          npx expo install expo-document-picker expo-print expo-sharing expo-file-system expo-asset

      - name: 📱 Create Complete App.js with All Features
        run: |
          echo "📱 Criando App.js completo com todas as funcionalidades..."
          
          cat > App.js << 'EOF'
          import React, { useState, useEffect } from 'react';
          import {
            View,
            Text,
            StyleSheet,
            SafeAreaView,
            TouchableOpacity,
            Alert,
            ScrollView,
            Modal,
            TextInput,
            Platform,
            ActivityIndicator
          } from 'react-native';
          import { StatusBar } from 'expo-status-bar';
          import * as DocumentPicker from 'expo-document-picker';
          import * as FileSystem from 'expo-file-system';
          import * as Print from 'expo-print';
          import * as Sharing from 'expo-sharing';
          import * as XLSX from 'xlsx';
          import { Icon } from 'react-native-elements';

          export default function App() {
            const [vaos, setVaos] = useState([
              {
                id: 1,
                descricao: 'Vão Principal - Linha A',
                localizacao: 'Setor Norte - KM 15',
                area: '150m²',
                dataNecessidade: '2025-07-30',
                status: 'pendente',
                dataInicio: null,
                dataConclusao: null
              }
            ]);
            const [modalVisible, setModalVisible] = useState(false);
            const [novoVao, setNovoVao] = useState({
              descricao: '',
              localizacao: '',
              area: '',
              dataNecessidade: ''
            });
            const [isLoading, setIsLoading] = useState(false);
            
            // Adicionar novo vão
            const adicionarVao = () => {
              if (!novoVao.descricao.trim()) {
                Alert.alert('Erro', 'Descrição é obrigatória');
                return;
              }
              
              const vao = {
                id: Date.now(),
                ...novoVao,
                status: 'pendente',
                dataInicio: null,
                dataConclusao: null
              };
              
              setVaos([...vaos, vao]);
              setNovoVao({ descricao: '', localizacao: '', area: '', dataNecessidade: '' });
              setModalVisible(false);
              Alert.alert('Sucesso', 'Vão de corte adicionado!');
            };
            
            // Alterar status do vão
            const alterarStatus = (id, novoStatus) => {
              setVaos(vaos.map(vao => {
                if (vao.id === id) {
                  const agora = new Date().toISOString().split('T')[0];
                  return {
                    ...vao,
                    status: novoStatus,
                    dataInicio: novoStatus === 'iniciado' ? agora : vao.dataInicio,
                    dataConclusao: novoStatus === 'concluido' ? agora : null
                  };
                }
                return vao;
              }));
            };
            
            // Cores do sistema de status
            const getCorStatus = (status) => {
              switch(status) {
                case 'pendente': return '#9E9E9E';  // Cinza
                case 'iniciado': return '#FF9800';  // Amarelo
                case 'concluido': return '#4CAF50'; // Verde
                default: return '#9E9E9E';
              }
            };
            
            // Ícones de alerta de prazo
            const getIconePrazo = (vao) => {
              try {
                const hoje = new Date();
                const dataNecessidade = new Date(vao.dataNecessidade);
                const diasRestantes = Math.ceil((dataNecessidade - hoje) / (1000 * 60 * 60 * 24));
                
                if (vao.status === 'concluido') return '✅';
                if (diasRestantes < 0) return '⚠️'; // Atrasado
                if (diasRestantes <= 7) return '🕐'; // Urgente
                return '📅'; // Normal
              } catch (error) {
                return '📅'; // Em caso de erro na data
              }
            };
            
            // Estatísticas
            const contarStatus = () => {
              const pendentes = vaos.filter(v => v.status === 'pendente').length;
              const iniciados = vaos.filter(v => v.status === 'iniciado').length;
              const concluidos = vaos.filter(v => v.status === 'concluido').length;
              return { pendentes, iniciados, concluidos };
            };
            
            // Importar planilha Excel
            const importarPlanilha = async () => {
              try {
                setIsLoading(true);
                const result = await DocumentPicker.getDocumentAsync({
                  type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                  copyToCacheDirectory: true
                });
                
                if (!result.canceled && result.assets && result.assets.length > 0) {
                  const fileUri = result.assets[0].uri;
                  const fileContent = await FileSystem.readAsStringAsync(fileUri, {
                    encoding: FileSystem.EncodingType.Base64,
                  });
                  
                  const workbook = XLSX.read(fileContent, { type: 'base64' });
                  const sheetName = workbook.SheetNames[0];
                  const sheet = workbook.Sheets[sheetName];
                  const data = XLSX.utils.sheet_to_json(sheet);
                  
                  if (data.length === 0) {
                    Alert.alert('Atenção', 'Planilha vazia ou sem dados compatíveis');
                    setIsLoading(false);
                    return;
                  }
                  
                  // Mapear dados para estrutura do app
                  const novosVaos = data.map((row, index) => ({
                    id: Date.now() + index,
                    descricao: row.Descricao || row.descricao || '',
                    localizacao: row.Localizacao || row.localizacao || '',
                    area: row.Area || row.area || '',
                    dataNecessidade: row.DataNecessidade || row.dataNecessidade || new Date().toISOString().split('T')[0],
                    status: 'pendente',
                    dataInicio: null,
                    dataConclusao: null
                  }));
                  
                  setVaos([...vaos, ...novosVaos]);
                  Alert.alert('Sucesso', `${novosVaos.length} vãos importados!`);
                }
              } catch (error) {
                console.error('Erro ao importar planilha:', error);
                Alert.alert('Erro', 'Falha ao importar planilha. Verifique o formato.');
              } finally {
                setIsLoading(false);
              }
            };
            
            // Gerar relatório PDF
            const gerarPDF = async () => {
              try {
                setIsLoading(true);
                const stats = contarStatus();
                
                // Criar HTML para o PDF
                const htmlContent = `
                  <html>
                    <head>
                      <style>
                        body { font-family: 'Helvetica', sans-serif; color: #333; margin: 20px; }
                        h1 { color: #2E7D32; text-align: center; }
                        .stats { display: flex; justify-content: space-around; margin: 20px 0; }
                        .stat { text-align: center; }
                        .stat-number { font-size: 24px; font-weight: bold; }
                        .stat-pendente { color: #9E9E9E; }
                        .stat-iniciado { color: #FF9800; }
                        .stat-concluido { color: #4CAF50; }
                        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                        th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
                        th { background-color: #4CAF50; color: white; }
                        .status-pendente { color: #9E9E9E; }
                        .status-iniciado { color: #FF9800; }
                        .status-concluido { color: #4CAF50; }
                        .footer { text-align: center; margin-top: 30px; font-size: 12px; color: #666; }
                      </style>
                    </head>
                    <body>
                      <h1>Relatório de Corte de Matos</h1>
                      
                      <div class="stats">
                        <div class="stat">
                          <div class="stat-number stat-pendente">${stats.pendentes}</div>
                          <p>Pendentes</p>
                        </div>
                        <div class="stat">
                          <div class="stat-number stat-iniciado">${stats.iniciados}</div>
                          <p>Iniciados</p>
                        </div>
                        <div class="stat">
                          <div class="stat-number stat-concluido">${stats.concluidos}</div>
                          <p>Concluídos</p>
                        </div>
                      </div>
                      
                      <table>
                        <tr>
                          <th>Descrição</th>
                          <th>Localização</th>
                          <th>Área</th>
                          <th>Prazo</th>
                          <th>Status</th>
                        </tr>
                        ${vaos.map(vao => `
                          <tr>
                            <td>${vao.descricao}</td>
                            <td>${vao.localizacao}</td>
                            <td>${vao.area}</td>
                            <td>${vao.dataNecessidade}</td>
                            <td class="status-${vao.status}">${vao.status.toUpperCase()}</td>
                          </tr>
                        `).join('')}
                      </table>
                      
                      <div class="footer">
                        Relatório gerado em: ${new Date().toLocaleDateString('pt-BR')} às ${new Date().toLocaleTimeString('pt-BR')}
                      </div>
                    </body>
                  </html>
                `;
                
                // Gerar PDF
                const { uri } = await Print.printToFileAsync({ html: htmlContent });
                
                // Compartilhar PDF
                if (await Sharing.isAvailableAsync()) {
                  await Sharing.shareAsync(uri, {
                    mimeType: 'application/pdf',
                    dialogTitle: 'Compartilhar Relatório de Corte de Matos',
                    UTI: 'com.adobe.pdf'
                  });
                } else {
                  Alert.alert('Erro', 'Compartilhamento não disponível neste dispositivo');
                }
              } catch (error) {
                console.error('Erro ao gerar PDF:', error);
                Alert.alert('Erro', 'Falha ao gerar relatório PDF');
              } finally {
                setIsLoading(false);
              }
            };
            
            const stats = contarStatus();
            
            return (
              <SafeAreaView style={styles.container}>
                <StatusBar style="light" backgroundColor="#2E7D32" />
                
                {/* Header */}
                <View style={styles.header}>
                  <Text style={styles.title}>🌿 Corte de Matos</Text>
                  <Text style={styles.subtitle}>Controle de Vãos - Sistema Elétrico</Text>
                </View>
                
                {/* Estatísticas */}
                <View style={styles.statsContainer}>
                  <View style={styles.statBox}>
                    <Text style={styles.statNumber}>{stats.pendentes}</Text>
                    <Text style={styles.statLabel}>Pendentes</Text>
                  </View>
                  <View style={styles.statBox}>
                    <Text style={[styles.statNumber, {color: '#FF9800'}]}>{stats.iniciados}</Text>
                    <Text style={styles.statLabel}>Iniciados</Text>
                  </View>
                  <View style={styles.statBox}>
                    <Text style={[styles.statNumber, {color: '#4CAF50'}]}>{stats.concluidos}</Text>
                    <Text style={styles.statLabel}>Concluídos</Text>
                  </View>
                </View>
                
                {/* Botões de Ação */}
                <View style={styles.actionButtonsContainer}>
                  <TouchableOpacity 
                    style={styles.actionButton} 
                    onPress={() => setModalVisible(true)}
                  >
                    <Text style={styles.actionButtonText}>➕ Adicionar Vão</Text>
                  </TouchableOpacity>
                  
                  <TouchableOpacity 
                    style={[styles.actionButton, { backgroundColor: '#3F51B5' }]} 
                    onPress={importarPlanilha}
                  >
                    <Text style={styles.actionButtonText}>📥 Importar Excel</Text>
                  </TouchableOpacity>
                  
                  <TouchableOpacity 
                    style={[styles.actionButton, { backgroundColor: '#607D8B' }]} 
                    onPress={gerarPDF}
                  >
                    <Text style={styles.actionButtonText}>📄 Gerar Relatório</Text>
                  </TouchableOpacity>
                </View>
                
                {/* Lista de Vãos */}
                <ScrollView style={styles.lista}>
                  {vaos.map((vao) => (
                    <View key={vao.id} style={[styles.vaoCard, { borderLeftColor: getCorStatus(vao.status) }]}>
                      <View style={styles.vaoHeader}>
                        <Text style={styles.vaoIcon}>{getIconePrazo(vao)}</Text>
                        <Text style={styles.vaoDescricao}>{vao.descricao}</Text>
                      </View>
                      
                      <Text style={styles.vaoInfo}>📍 {vao.localizacao}</Text>
                      <Text style={styles.vaoInfo}>📏 Área: {vao.area}</Text>
                      <Text style={styles.vaoInfo}>📅 Prazo: {vao.dataNecessidade}</Text>
                      
                      <View style={styles.statusContainer}>
                        <Text style={[styles.status, { color: getCorStatus(vao.status) }]}>
                          ● {vao.status.toUpperCase()}
                        </Text>
                      </View>
                      
                      {/* Botões de Ação do Vão */}
                      <View style={styles.vaoActionButtons}>
                        {vao.status === 'pendente' && (
                          <TouchableOpacity 
                            style={[styles.vaoActionBtn, {backgroundColor: '#FF9800'}]}
                            onPress={() => alterarStatus(vao.id, 'iniciado')}
                          >
                            <Text style={styles.vaoActionBtnText}>▶️ Iniciar Corte</Text>
                          </TouchableOpacity>
                        )}
                        
                        {vao.status === 'iniciado' && (
                          <TouchableOpacity 
                            style={[styles.vaoActionBtn, {backgroundColor: '#4CAF50'}]}
                            onPress={() => alterarStatus(vao.id, 'concluido')}
                          >
                            <Text style={styles.vaoActionBtnText}>✅ Finalizar Corte</Text>
                          </TouchableOpacity>
                        )}
                        
                        {vao.status === 'concluido' && (
                          <View style={[styles.vaoActionBtn, {backgroundColor: '#4CAF50'}]}>
                            <Text style={styles.vaoActionBtnText}>✅ Corte Finalizado</Text>
                          </View>
                        )}
                      </View>
                    </View>
                  ))}
                  
                  {vaos.length === 0 && (
                    <View style={styles.emptyContainer}>
                      <Text style={styles.emptyText}>
                        🌿 Nenhum vão de corte cadastrado{'\n'}
                        Toque em "Adicionar Vão" ou "Importar Excel"
                      </Text>
                    </View>
                  )}
                </ScrollView>
                
                {/* Modal Adicionar Vão */}
                <Modal
                  animationType="slide"
                  transparent={true}
                  visible={modalVisible}
                  onRequestClose={() => setModalVisible(false)}
                >
                  <View style={styles.modalOverlay}>
                    <View style={styles.modalContent}>
                      <Text style={styles.modalTitle}>Novo Vão de Corte</Text>
                      
                      <TextInput
                        style={styles.input}
                        placeholder="Descrição do vão (ex: Vão Principal - Linha A)"
                        value={novoVao.descricao}
                        onChangeText={(text) => setNovoVao({...novoVao, descricao: text})}
                      />
                      
                      <TextInput
                        style={styles.input}
                        placeholder="Localização (ex: Setor Norte - KM 15)"
                        value={novoVao.localizacao}
                        onChangeText={(text) => setNovoVao({...novoVao, localizacao: text})}
                      />
                      
                      <TextInput
                        style={styles.input}
                        placeholder="Área (ex: 150m²)"
                        value={novoVao.area}
                        onChangeText={(text) => setNovoVao({...novoVao, area: text})}
                      />
                      
                      <TextInput
                        style={styles.input}
                        placeholder="Data necessidade (AAAA-MM-DD)"
                        value={novoVao.dataNecessidade}
                        onChangeText={(text) => setNovoVao({...novoVao, dataNecessidade: text})}
                      />
                      
                      <View style={styles.modalButtons}>
                        <TouchableOpacity 
                          style={[styles.modalBtn, {backgroundColor: '#f44336'}]}
                          onPress={() => setModalVisible(false)}
                        >
                          <Text style={styles.modalBtnText}>Cancelar</Text>
                        </TouchableOpacity>
                        
                        <TouchableOpacity 
                          style={[styles.modalBtn, {backgroundColor: '#4CAF50'}]}
                          onPress={adicionarVao}
                        >
                          <Text style={styles.modalBtnText}>Adicionar</Text>
                        </TouchableOpacity>
                      </View>
                    </View>
                  </View>
                </Modal>
                
                {/* Loading Indicator */}
                {isLoading && (
                  <View style={styles.loadingOverlay}>
                    <ActivityIndicator size="large" color="#4CAF50" />
                    <Text style={styles.loadingText}>Processando...</Text>
                  </View>
                )}
                
                {/* Footer */}
                <View style={styles.footer}>
                  <Text style={styles.footerText}>
                    Corte de Matos v1.0 - Total: {vaos.length} vãos
                  </Text>
                </View>
              </SafeAreaView>
            );
          }
          
          const styles = StyleSheet.create({
            container: {
              flex: 1,
              backgroundColor: '#f5f5f5',
            },
            header: {
              backgroundColor: '#2E7D32',
              padding: 20,
              alignItems: 'center',
              ...Platform.select({
                ios: { paddingTop: 50 },
                android: { paddingTop: 20 },
              }),
            },
            title: {
              fontSize: 24,
              fontWeight: 'bold',
              color: 'white',
            },
            subtitle: {
              fontSize: 14,
              color: '#C8E6C9',
              marginTop: 5,
            },
            statsContainer: {
              flexDirection: 'row',
              backgroundColor: 'white',
              margin: 15,
              borderRadius: 10,
              padding: 15,
              elevation: 3,
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 2 },
              shadowOpacity: 0.1,
              shadowRadius: 3,
            },
            statBox: {
              flex: 1,
              alignItems: 'center',
            },
            statNumber: {
              fontSize: 24,
              fontWeight: 'bold',
              color: '#333',
            },
            statLabel: {
              fontSize: 12,
              color: '#666',
              marginTop: 5,
            },
            actionButtonsContainer: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              paddingHorizontal: 15,
              marginBottom: 10,
            },
            actionButton: {
              flex: 1,
              backgroundColor: '#4CAF50',
              padding: 10,
              borderRadius: 10,
              marginHorizontal: 5,
              alignItems: 'center',
              elevation: 2,
            },
            actionButtonText: {
              color: 'white',
              fontSize: 13,
              fontWeight: 'bold',
              textAlign: 'center',
            },
            lista: {
              flex: 1,
              paddingHorizontal: 15,
            },
            vaoCard: {
              backgroundColor: 'white',
              marginBottom: 15,
              borderRadius: 10,
              padding: 15,
              borderLeftWidth: 5,
              elevation: 2,
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 1 },
              shadowOpacity: 0.1,
              shadowRadius: 2,
            },
            vaoHeader: {
              flexDirection: 'row',
              alignItems: 'center',
              marginBottom: 10,
            },
            vaoIcon: {
              fontSize: 20,
              marginRight: 10,
            },
            vaoDescricao: {
              fontSize: 16,
              fontWeight: 'bold',
              color: '#333',
              flex: 1,
            },
            vaoInfo: {
              fontSize: 14,
              color: '#666',
              marginBottom: 5,
            },
            statusContainer: {
              marginVertical: 10,
            },
            status: {
              fontSize: 14,
              fontWeight: 'bold',
            },
            vaoActionButtons: {
              marginTop: 10,
            },
            vaoActionBtn: {
              padding: 10,
              borderRadius: 5,
              alignItems: 'center',
            },
            vaoActionBtnText: {
              color: 'white',
              fontWeight: 'bold',
            },
            emptyContainer: {
              alignItems: 'center',
              marginTop: 50,
            },
            emptyText: {
              fontSize: 16,
              color: '#999',
              textAlign: 'center',
              lineHeight: 24,
            },
            modalOverlay: {
              flex: 1,
              backgroundColor: 'rgba(0,0,0,0.5)',
              justifyContent: 'center',
              alignItems: 'center',
            },
            modalContent: {
              backgroundColor: 'white',
              margin: 20,
              padding: 20,
              borderRadius: 10,
              width: '90%',
              maxHeight: '80%',
            },
            modalTitle: {
              fontSize: 18,
              fontWeight: 'bold',
              marginBottom: 20,
              textAlign: 'center',
            },
            input: {
              borderWidth: 1,
              borderColor: '#ddd',
              padding: 10,
              marginBottom: 15,
              borderRadius: 5,
              fontSize: 16,
            },
            modalButtons: {
              flexDirection: 'row',
              justifyContent: 'space-between',
            },
            modalBtn: {
              flex: 1,
              padding: 15,
              marginHorizontal: 5,
              borderRadius: 5,
              alignItems: 'center',
            },
            modalBtnText: {
              color: 'white',
              fontWeight: 'bold',
            },
            footer: {
              padding: 15,
              alignItems: 'center',
              borderTopWidth: 1,
              borderTopColor: '#eee',
              backgroundColor: 'white',
            },
            footerText: {
              color: '#666',
              fontSize: 12,
            },
            loadingOverlay: {
              position: 'absolute',
              top: 0,
              bottom: 0,
              left: 0,
              right: 0,
              backgroundColor: 'rgba(0,0,0,0.4)',
              justifyContent: 'center',
              alignItems: 'center',
              zIndex: 1000,
            },
            loadingText: {
              color: 'white',
              marginTop: 10,
              fontSize: 16,
            },
          });
          EOF
          
          echo "✅ App.js completo com todas as funcionalidades!"

      - name: 📝 Create Fixed app.json for Android 10+
        run: |
          echo "📝 Criando app.json para Android 10+..."
          
          cat > app.json << 'EOF'
          {
            "expo": {
              "name": "Corte de Matos",
              "slug": "corte-matos-app",
              "version": "1.0.5",
              "orientation": "portrait",
              "icon": "./assets/icon.png",
              "userInterfaceStyle": "light",
              "splash": {
                "image": "./assets/splash.png",
                "resizeMode": "contain",
                "backgroundColor": "#4CAF50"
              },
              "assetBundlePatterns": [
                "**/*"
              ],
              "ios": {
                "supportsTablet": true
              },
              "android": {
                "adaptiveIcon": {
                  "foregroundImage": "./assets/adaptive-icon.png",
                  "backgroundColor": "#4CAF50"
                },
                "package": "com.pikulito.cortematos",
                "versionCode": 5,
                "permissions": [
                  "READ_EXTERNAL_STORAGE",
                  "WRITE_EXTERNAL_STORAGE"
                ],
                "minSdkVersion": 29
              },
              "web": {
                "favicon": "./assets/favicon.png"
              },
              "extra": {
                "eas": {
                  "projectId": "84ea4587-b864-4560-a167-05855903311c"
                }
              },
              "owner": "pikulito"
            }
          }
          EOF
          
          echo "✅ app.json para Android 10+ criado!"

      - name: 🔧 Create Metro Config
        run: |
          echo "🔧 Criando metro.config.js..."
          
          cat > metro.config.js << 'EOF'
          const { getDefaultConfig } = require('@expo/metro-config');
          
          const config = getDefaultConfig(__dirname);
          
          module.exports = config;
          EOF

      - name: 🔑 Setup Keystore
        run: |
          echo "🔑 Configurando keystore..."
          
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > my-release-key.jks
          
          # Detectar alias real
          REAL_ALIAS=$(keytool -list -keystore my-release-key.jks -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" 2>/dev/null | grep "PrivateKeyEntry" | head -1 | cut -d',' -f1 | tr -d ' ' || echo "${{ secrets.ANDROID_KEY_ALIAS }}")
          
          cat > credentials.json << EOF
          {
            "android": {
              "keystore": {
                "keystorePath": "./my-release-key.jks",
                "keystorePassword": "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}",
                "keyAlias": "$REAL_ALIAS",
                "keyPassword": "${{ secrets.ANDROID_KEY_PASSWORD }}"
              }
            }
          }
          EOF
          
          echo "✅ Keystore configurado!"
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: 🔧 Configure EAS
        run: |
          echo "🔧 Configurando EAS..."
          
          cat > eas.json << 'EOF'
          {
            "cli": {
              "version": ">= 7.8.6",
              "appVersionSource": "local"
            },
            "build": {
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "credentialsSource": "local",
                  "gradleCommand": ":app:assembleRelease"
                }
              },
              "production": {
                "android": {
                  "buildType": "app-bundle",
                  "credentialsSource": "local"
                }
              }
            }
          }
          EOF
          
          npx eas init --id 84ea4587-b864-4560-a167-05855903311c --force --non-interactive
          
          echo "✅ EAS configurado!"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🔨 Build Corte de Matos APK
        run: |
          echo "🔨 Building APK completo do Corte de Matos..."
          echo "📱 Profile: ${{ github.event.inputs.profile }}"
          
          npx eas build --platform android --profile ${{ github.event.inputs.profile }} --non-interactive --wait
          
          echo "🎉 Build do Corte de Matos concluído!"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: ✅ Build Status
        if: always()
        run: |
          echo "📋 Status do build Corte de Matos:"
          echo ""
          echo "🌿 FUNCIONALIDADES IMPLEMENTADAS:"
          echo "  ✅ Importação de Planilhas Excel"
          echo "  ✅ Sistema de cores (Cinza/Amarelo/Verde)"
          echo "  ✅ Alertas de prazo (🕐 urgente, ⚠️ atrasado)"
          echo "  ✅ Geração de Relatórios PDF"
          echo "  ✅ Compartilhamento via WhatsApp e outros apps"
          echo "  ✅ Compatível com Android 10+ (API 29+)"
          echo ""
          
          npx eas build:list --platform android --limit 3 || echo "Lista indisponível"
          echo ""
          echo "🔗 https://expo.dev/accounts/pikulito/projects/corte-matos-app/builds"
          echo ""
          echo "📱 Instruções para o usuário:"
          echo "  1. Baixe o APK pelo link acima"
          echo "  2. Instale no dispositivo Android 10+ (habilite 'Fontes desconhecidas')"
          echo "  3. Para importar planilhas Excel, use colunas: Descricao, Localizacao, Area, DataNecessidade"
          echo "  4. Compartilhe relatórios PDF pelo WhatsApp ou outros aplicativos"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}