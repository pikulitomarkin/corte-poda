name: 🚀 Build APK - Corte de Matos (COMPLETO)

on:
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

jobs:
  build:
    name: 📱 Build Android APK - Corte de Matos
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 📦 Install dependencies
        run: |
          echo "📦 Instalando dependências..."
          npm install --legacy-peer-deps
          npm install @react-native-async-storage/async-storage expo-document-picker expo-print expo-sharing xlsx --save

      - name: 🔧 Setup Expo CLI
        run: |
          echo "🔧 Instalando Expo CLI e EAS CLI..."
          npm install -g @expo/cli@latest eas-cli@latest

      - name: 🔐 Authenticate with Expo
        run: |
          echo "🔐 Autenticando com Expo..."
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🖼️ Garantir assets do app
        run: |
          mkdir -p assets
          if [ ! -f assets/icon.png ]; then
            echo "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAAAA1BMVEXM/wBjQ1FjAAAASElEQVR4nO3BMQEAAADCoPVPbQo/oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICXAcTgAAG6EJuyAAAAAElFTkSuQmCC" | base64 -d > assets/icon.png
            cp assets/icon.png assets/adaptive-icon.png
            cp assets/icon.png assets/splash.png
            cp assets/icon.png assets/favicon.png
          fi

      - name: 📝 Garantir app.json
        run: |
          cat > app.json << 'EOF'
          {
            "expo": {
              "name": "Corte de Matos",
              "slug": "corte-matos-app",
              "version": "1.1.0",
              "orientation": "portrait",
              "icon": "./assets/icon.png",
              "userInterfaceStyle": "light",
              "splash": {
                "image": "./assets/splash.png",
                "resizeMode": "contain",
                "backgroundColor": "#4CAF50"
              },
              "assetBundlePatterns": [
                "**/*"
              ],
              "android": {
                "adaptiveIcon": {
                  "foregroundImage": "./assets/adaptive-icon.png",
                  "backgroundColor": "#4CAF50"
                },
                "package": "com.pikulito.cortematos",
                "versionCode": 6,
                "compileSdkVersion": 34,
                "targetSdkVersion": 34,
                "permissions": []
              },
              "extra": {
                "eas": {
                  "projectId": "84ea4587-b864-4560-a167-05855903311c"
                }
              },
              "owner": "pikulito"
            }
          }
          EOF

      - name: 🔧 Garantir metro.config.js
        run: |
          cat > metro.config.js << 'EOF'
          const { getDefaultConfig } = require('@expo/metro-config');
          const config = getDefaultConfig(__dirname);
          module.exports = config;
          EOF

      - name: 🔑 Setup Keystore
        run: |
          if [ -n "${{ secrets.ANDROID_KEYSTORE }}" ]; then
            echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > my-release-key.jks
            KEYSTORE_PASSWORD="${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
            KEY_ALIAS="${{ secrets.ANDROID_KEY_ALIAS }}"
            KEY_PASSWORD="${{ secrets.ANDROID_KEY_PASSWORD }}"
          else
            keytool -genkeypair -v -keystore my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias upload -storepass "temppassword" -keypass "temppassword" -dname "CN=Example, OU=Android, O=Example, L=Example, S=Example, C=US"
            KEYSTORE_PASSWORD="temppassword"
            KEY_ALIAS="upload"
            KEY_PASSWORD="temppassword"
          fi
          cat > credentials.json << EOF
          {
            "android": {
              "keystore": {
                "keystorePath": "./my-release-key.jks",
                "keystorePassword": "$KEYSTORE_PASSWORD",
                "keyAlias": "$KEY_ALIAS",
                "keyPassword": "$KEY_PASSWORD"
              }
            }
          }
          EOF

      - name: 🔧 Garantir eas.json
        run: |
          cat > eas.json << 'EOF'
          {
            "cli": {
              "version": ">= 7.0.0",
              "appVersionSource": "local"
            },
            "build": {
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "credentialsSource": "local"
                }
              },
              "production": {
                "android": {
                  "buildType": "app-bundle",
                  "credentialsSource": "local"
                }
              }
            }
          }
          EOF

      - name: 🔨 Build Corte de Matos APK
        run: |
          echo "🔨 Build APK completo do Corte de Matos..."
          export EAS_NO_VCS=1
          export CI=1
          npx eas build --platform android --profile ${{ github.event.inputs.profile }} --non-interactive --wait
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 📤 Upload Build Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: corte-matos-apk
          path: |
            output.apk
            build-output/*.apk
          if-no-files-found: ignore

      - name: ✅ Build Status
        if: always()
        run: |
          echo "Build finalizado. Baixe o APK nos artefatos ou pelo dashboard do Expo."
