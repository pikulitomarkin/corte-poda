name: üöÄ Build APK - Corte de Matos (Simplificado)

on:
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

jobs:
  build:
    name: üì± Build Android APK - Corte de Matos
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ‚òï Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üì¶ Install dependencies
        run: |
          echo "üì¶ Instalando depend√™ncias do zero..."
          # Remover diret√≥rios que podem conter informa√ß√µes de cache
          rm -rf node_modules package-lock.json yarn.lock
          # Criar novo package.json para o build
          cat > package.json << 'EOF'
          {
            "name": "corte-matos-app",
            "version": "1.1.0",
            "main": "App.js",
            "scripts": {
              "start": "expo start",
              "android": "expo start --android",
              "ios": "expo start --ios",
              "web": "expo start --web"
            },
            "dependencies": {
              "@react-native-async-storage/async-storage": "^1.18.2",
              "expo": "~50.0.6",
              "expo-constants": "~15.4.2",
              "expo-document-picker": "~11.10.1",
              "expo-print": "~12.8.1",
              "expo-sharing": "~11.10.0",
              "expo-status-bar": "~1.11.1",
              "expo-build-properties": "~0.11.1",
              "expo-dev-client": "~3.3.9",
              "react": "18.2.0",
              "react-native": "0.73.4",
              "react-native-elements": "^3.4.3",
              "xlsx": "^0.18.5"
            },
            "devDependencies": {
              "@babel/core": "^7.20.0",
              "babel-preset-expo": "^10.0.0"
            },
            "overrides": {
              "jimp-compact": "0.16.1"
            },
            "private": true
          }
          EOF
          # Instalar depend√™ncias a partir do novo package.json
          npm install --legacy-peer-deps
          
      - name: üîß Setup Expo CLI
        run: |
          echo "üîß Instalando Expo CLI e EAS CLI..."
          npm install -g @expo/cli@latest eas-cli@latest
          npx eas-cli --version
          npx expo --version
          
      - name: üöÄ Configurar ambiente EAS
        run: |
          echo "üöÄ Configurando projeto EAS..."
          
          # Criar eas.json diretamente (sem usar eas init)
          cat > eas.json << 'EOF'
          {
            "cli": {
              "version": ">= 7.0.0",
              "appVersionSource": "local",
              "requireCommit": false
            },
            "build": {
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleRelease",
                  "developmentClient": false
                }
              },
              "production": {
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleRelease"
                }
              }
            }
          }
          EOF
          
          echo "EAS configurado com sucesso."
          
          # Configurar o keystore para assinatura
          echo "Configurando keystore para assinatura..."
          
          # Criar keystore para desenvolvimento (ou usar um existente dos secrets)
          keytool -genkeypair -v -keystore my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias upload -storepass "temppassword" -keypass "temppassword" -dname "CN=Example, OU=Android, O=Example, L=Example, S=Example, C=US"
          KEYSTORE_PASSWORD="temppassword"
          KEY_ALIAS="upload"
          KEY_PASSWORD="temppassword"
          
          # Criar credentials.json para o build
          cat > credentials.json << 'EOF'
          {
            "android": {
              "keystore": {
                "keystorePath": "./my-release-key.jks",
                "keystorePassword": "temppassword",
                "keyAlias": "upload",
                "keyPassword": "temppassword"
              }
            }
          }
          EOF
          
          echo "Keystore e credentials.json configurados com sucesso."

      - name: üìù Criar App.js
        run: |
          cat > App.js << 'EOF'
          import React, { useState, useEffect } from 'react';
          import { StyleSheet, Text, View, TouchableOpacity, FlatList, Alert, Modal, TextInput, Button, ScrollView, Image, LogBox, SafeAreaView } from 'react-native';
          import * as DocumentPicker from 'expo-document-picker';
          import * as Sharing from 'expo-sharing';
          import * as Print from 'expo-print';
          import { StatusBar } from 'expo-status-bar';
          import AsyncStorage from '@react-native-async-storage/async-storage';
          import { MaterialIcons } from '@expo/vector-icons';
          import XLSX from 'xlsx';

          // Desabilitar logs que possam estar causando problemas
          LogBox.ignoreLogs(['Require cycle:', 'AsyncStorage has been extracted']);
          
          // Componente ErrorBoundary para capturar erros fatais
          class ErrorBoundary extends React.Component {
            constructor(props) {
              super(props);
              this.state = { hasError: false, errorInfo: null };
            }
            
            static getDerivedStateFromError(error) {
              return { hasError: true };
            }
            
            componentDidCatch(error, errorInfo) {
              console.error("Erro fatal capturado:", error);
              this.setState({ errorInfo: errorInfo });
              
              // Tentar salvar o erro para diagn√≥stico posterior
              try {
                AsyncStorage.setItem('lastFatalError', JSON.stringify({
                  message: error.message,
                  stack: error.stack,
                  time: new Date().toISOString()
                }));
              } catch (e) {
                console.error("N√£o foi poss√≠vel salvar o erro:", e);
              }
            }
            
            render() {
              if (this.state.hasError) {
                return (
                  <SafeAreaView style={{flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20}}>
                    <Text style={{fontSize: 22, fontWeight: 'bold', color: 'red', marginBottom: 20}}>
                      Algo deu errado!
                    </Text>
                    <Text style={{marginBottom: 20, textAlign: 'center'}}>
                      O aplicativo encontrou um erro inesperado e precisa ser reiniciado.
                    </Text>
                    <Text style={{fontSize: 12, color: '#666', marginBottom: 20}}>
                      Detalhes t√©cnicos foram salvos para diagn√≥stico.
                    </Text>
                    <TouchableOpacity
                      style={{backgroundColor: '#4CAF50', padding: 15, borderRadius: 5}}
                      onPress={() => this.setState({ hasError: false })}
                    >
                      <Text style={{color: 'white', fontWeight: 'bold'}}>Tentar Novamente</Text>
                    </TouchableOpacity>
                  </SafeAreaView>
                );
              }
              
              return this.props.children;
            }
          }

          // Componente de status de sincroniza√ß√£o
          const SyncStatus = ({ lastSync, isOnline, onSync }) => {
            return (
              <View style={styles.syncContainer}>
                <Text style={styles.syncText}>
                  Status: {isOnline ? 'Online üü¢' : 'Offline üî¥'}
                </Text>
                <Text style={styles.syncText}>
                  √öltima sincroniza√ß√£o: {lastSync || 'Nunca'}
                </Text>
                <TouchableOpacity
                  style={[styles.syncButton, !isOnline && styles.syncButtonDisabled]}
                  onPress={onSync}
                  disabled={!isOnline}
                >
                  <Text style={styles.syncButtonText}>Sincronizar</Text>
                </TouchableOpacity>
              </View>
            );
          };

          // Componente Login
          const LoginScreen = ({ onLogin }) => {
            const [username, setUsername] = useState('');
            const [password, setPassword] = useState('');
            const [error, setError] = useState('');

            const handleLogin = () => {
              try {
                // Usu√°rios permitidos (em produ√ß√£o, seria armazenado no servidor)
                const users = [
                  { username: 'admin', password: 'admin123', role: 'admin' },
                  { username: 'user', password: 'user123', role: 'user' }
                ];

                const user = users.find(
                  (u) => u.username === username && u.password === password
                );

                if (user) {
                  onLogin(user);
                  setError('');
                } else {
                  setError('Usu√°rio ou senha inv√°lidos');
                }
              } catch (error) {
                console.error("Erro no login:", error);
                setError('Erro ao processar login. Tente novamente.');
              }
            };

            return (
              <SafeAreaView style={styles.loginContainer}>
                <View style={styles.logoContainer}>
                  <MaterialIcons name="nature" size={80} color="#4CAF50" />
                  <Text style={styles.logoText}>Corte de Matos</Text>
                </View>
                <View style={styles.formContainer}>
                  <TextInput
                    style={styles.input}
                    placeholder="Usu√°rio"
                    value={username}
                    onChangeText={setUsername}
                    autoCapitalize="none"
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="Senha"
                    value={password}
                    onChangeText={setPassword}
                    secureTextEntry
                  />
                  {error ? <Text style={styles.errorText}>{error}</Text> : null}
                  <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>
                    <Text style={styles.loginButtonText}>Entrar</Text>
                  </TouchableOpacity>
                </View>
                <Text style={{position: 'absolute', bottom: 20, color: '#999', fontSize: 12}}>
                  Vers√£o 1.1.0 - {new Date().getFullYear()}
                </Text>
              </SafeAreaView>
            );
          };

          // Wrapper do aplicativo com ErrorBoundary
          const AppWithErrorBoundary = () => {
            return (
              <ErrorBoundary>
                <MainApp />
              </ErrorBoundary>
            );
          };

          // Aplicativo principal
          const MainApp = () => {
            const [vaos, setVaos] = useState([]);
            const [modalVisible, setModalVisible] = useState(false);
            const [selectedVao, setSelectedVao] = useState(null);
            const [user, setUser] = useState(null);
            const [isOnline, setIsOnline] = useState(false);
            const [lastSync, setLastSync] = useState(null);
            const [isLoading, setIsLoading] = useState(true);
            const [hasInitError, setHasInitError] = useState(false);

            // Inicializa√ß√£o controlada para evitar erros
            useEffect(() => {
              console.log("Iniciando o aplicativo...");
              
              const init = async () => {
                try {
                  setIsLoading(true);
                  
                  // Carregar configura√ß√£o de usu√°rio
                  await loadUser();
                  
                  // Carregar dados de v√£os
                  await loadVaos();
                  
                  // Simular status online
                  setIsOnline(Math.random() > 0.3);
                  
                  // Carregar √∫ltima sincroniza√ß√£o
                  const lastSyncData = await AsyncStorage.getItem('lastSync');
                  if (lastSyncData) {
                    setLastSync(lastSyncData);
                  }
                  
                  console.log("Inicializa√ß√£o conclu√≠da com sucesso.");
                } catch (error) {
                  console.error("Erro durante a inicializa√ß√£o:", error);
                  setHasInitError(true);
                  
                  // Apresentar alerta amig√°vel sobre o erro
                  Alert.alert(
                    "Problema na inicializa√ß√£o", 
                    "Ocorreu um erro ao iniciar o aplicativo. Alguns recursos podem n√£o funcionar corretamente.",
                    [{ text: "OK" }]
                  );
                } finally {
                  setIsLoading(false);
                }
              };
              
              init();
              
              // Configurar verifica√ß√£o peri√≥dica de status online
              const interval = setInterval(() => {
                setIsOnline(Math.random() > 0.3);
              }, 10000);
              
              return () => clearInterval(interval);
            }, []);

            // Fun√ß√£o para carregar usu√°rio
            const loadUser = async () => {
              try {
                const savedUser = await AsyncStorage.getItem('user');
                if (savedUser) {
                  setUser(JSON.parse(savedUser));
                }
              } catch (error) {
                console.error('Erro ao carregar usu√°rio:', error);
                throw error; // Propagar o erro para ser tratado na inicializa√ß√£o
              }
            };

            // Fun√ß√£o para carregar os v√£os
            const loadVaos = async () => {
              try {
                const savedVaos = await AsyncStorage.getItem('vaos');
                if (savedVaos) {
                  setVaos(JSON.parse(savedVaos));
                }
              } catch (error) {
                console.error('Erro ao carregar vaos:', error);
                throw error; // Propagar o erro para ser tratado na inicializa√ß√£o
              }
            };

            // Salva vaos no armazenamento local
            useEffect(() => {
              const saveVaos = async () => {
                try {
                  if (vaos.length > 0) {
                    await AsyncStorage.setItem('vaos', JSON.stringify(vaos));
                  }
                } catch (error) {
                  console.error('Erro ao salvar vaos:', error);
                  Alert.alert(
                    "Erro ao salvar dados",
                    "N√£o foi poss√≠vel salvar as altera√ß√µes. Verifique o espa√ßo dispon√≠vel no dispositivo.",
                    [{ text: "OK" }]
                  );
                }
              };

              saveVaos();
            }, [vaos]);

            const handleLogin = async (loggedUser) => {
              try {
                setUser(loggedUser);
                await AsyncStorage.setItem('user', JSON.stringify(loggedUser));
                console.log("Usu√°rio logado com sucesso:", loggedUser.username);
              } catch (error) {
                console.error('Erro ao salvar usu√°rio:', error);
                Alert.alert(
                  "Erro no login",
                  "Usu√°rio autenticado, mas n√£o foi poss√≠vel salvar os dados de sess√£o.",
                  [{ text: "OK" }]
                );
              }
            };

            const handleLogout = async () => {
              try {
                setUser(null);
                await AsyncStorage.removeItem('user');
                console.log("Logout realizado com sucesso");
              } catch (error) {
                console.error('Erro ao remover usu√°rio:', error);
                Alert.alert(
                  "Erro no logout",
                  "N√£o foi poss√≠vel finalizar a sess√£o corretamente.",
                  [{ text: "OK" }]
                );
              }
            };

            const handleSync = () => {
              try {
                if (!isOnline) {
                  Alert.alert("Erro", "Voc√™ est√° offline. N√£o √© poss√≠vel sincronizar.");
                  return;
                }
                
                // Simula√ß√£o de sincroniza√ß√£o
                Alert.alert(
                  "Sincroniza√ß√£o",
                  "Sincronizando dados com o servidor...",
                  [{ text: "OK" }]
                );
                
                const now = new Date().toLocaleString();
                setLastSync(now);
                
                // Salvar data de sincroniza√ß√£o
                AsyncStorage.setItem('lastSync', now);
                console.log("Sincroniza√ß√£o simulada em:", now);
              } catch (error) {
                console.error('Erro durante sincroniza√ß√£o:', error);
                Alert.alert(
                  "Erro na sincroniza√ß√£o",
                  "N√£o foi poss√≠vel completar a sincroniza√ß√£o.",
                  [{ text: "OK" }]
                );
              }
            };

            const pickExcel = async () => {
              try {
                console.log("Iniciando sele√ß√£o de arquivo Excel...");
                const result = await DocumentPicker.getDocumentAsync({
                  type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                });

                if (result.canceled) {
                  console.log("Sele√ß√£o de arquivo cancelada pelo usu√°rio");
                  return;
                }

                console.log("Arquivo selecionado:", result.assets[0].name);
                const { uri } = result.assets[0];
                const response = await fetch(uri);
                const blob = await response.blob();
                const reader = new FileReader();

                reader.onload = (e) => {
                  try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    if (!workbook || !workbook.SheetNames || workbook.SheetNames.length === 0) {
                      throw new Error("Arquivo Excel inv√°lido ou vazio");
                    }
                    
                    const sheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[sheetName];
                    const jsonData = XLSX.utils.sheet_to_json(worksheet);
                    
                    if (!jsonData || jsonData.length === 0) {
                      Alert.alert("Aviso", "A planilha n√£o cont√©m dados ou est√° em formato inv√°lido.");
                      return;
                    }

                    // Transformando os dados do Excel com valida√ß√£o
                    const newVaos = jsonData.map((item, index) => {
                      // Verificar campos obrigat√≥rios
                      const descricao = item.Descricao || 'Sem descri√ß√£o';
                      const localizacao = item.Localizacao || 'Sem localiza√ß√£o';
                      const area = parseFloat(item.Area) || 0;
                      
                      // Validar e formatar a data
                      let dataNecessidade = new Date().toISOString().split('T')[0];
                      if (item.DataNecessidade) {
                        // Tentar reconhecer formatos comuns de data
                        const dateAttempt = new Date(item.DataNecessidade);
                        if (!isNaN(dateAttempt.getTime())) {
                          dataNecessidade = dateAttempt.toISOString().split('T')[0];
                        }
                      }
                      
                      return {
                        id: Date.now() + index,
                        descricao,
                        localizacao, 
                        area,
                        dataNecessidade,
                        status: 'pendente',
                        dataInicio: null,
                        dataConclusao: null,
                      };
                    });

                    console.log(`Processados ${newVaos.length} v√£os da planilha`);
                    setVaos([...vaos, ...newVaos]);
                    Alert.alert('Sucesso', `${newVaos.length} v√£os importados com sucesso!`);
                  } catch (error) {
                    console.error('Erro ao processar planilha:', error);
                    Alert.alert(
                      'Erro',
                      'N√£o foi poss√≠vel processar o arquivo Excel. Verifique se o formato est√° correto.'
                    );
                  }
                };

                reader.onerror = (error) => {
                  console.error('Erro na leitura do arquivo:', error);
                  Alert.alert('Erro', 'Falha ao ler o arquivo. Tente novamente.');
                };

                reader.readAsArrayBuffer(blob);
              } catch (error) {
                console.error('Erro ao importar Excel:', error);
                Alert.alert('Erro', 'N√£o foi poss√≠vel ler o arquivo Excel. Verifique as permiss√µes do aplicativo.');
              }
            };

            const openVaoDetails = (vao) => {
              setSelectedVao(vao);
              setModalVisible(true);
            };

            const updateVaoStatus = (id, newStatus) => {
              try {
                const updatedVaos = vaos.map((vao) => {
                  if (vao.id === id) {
                    if (newStatus === 'iniciado' && vao.status === 'pendente') {
                      return { ...vao, status: newStatus, dataInicio: new Date().toISOString().split('T')[0] };
                    } else if (newStatus === 'concluido' && (vao.status === 'pendente' || vao.status === 'iniciado')) {
                      return { 
                        ...vao, 
                        status: newStatus, 
                        dataInicio: vao.dataInicio || new Date().toISOString().split('T')[0],
                        dataConclusao: new Date().toISOString().split('T')[0] 
                      };
                    }
                  }
                  return vao;
                });

                setVaos(updatedVaos);
                setModalVisible(false);
              } catch (error) {
                console.error('Erro ao atualizar status:', error);
                Alert.alert('Erro', 'N√£o foi poss√≠vel atualizar o status do v√£o.');
              }
            };

            const getStatusColor = (status) => {
              switch (status) {
                case 'pendente':
                  return '#9E9E9E';
                case 'iniciado':
                  return '#FFC107';
                case 'concluido':
                  return '#4CAF50';
                default:
                  return '#9E9E9E';
              }
            };

            const getStatusText = (status) => {
              switch (status) {
                case 'pendente':
                  return 'Pendente';
                case 'iniciado':
                  return 'Iniciado';
                case 'concluido':
                  return 'Conclu√≠do';
                default:
                  return 'Desconhecido';
              }
            };

            const isUrgent = (dataNecessidade) => {
              try {
                const today = new Date();
                const necessidade = new Date(dataNecessidade);
                const diffTime = necessidade - today;
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                return diffDays <= 7 && diffDays > 0;
              } catch (error) {
                console.error('Erro ao verificar urg√™ncia:', error);
                return false;
              }
            };

            const isLate = (dataNecessidade) => {
              try {
                const today = new Date();
                const necessidade = new Date(dataNecessidade);
                return necessidade < today;
              } catch (error) {
                console.error('Erro ao verificar atraso:', error);
                return false;
              }
            };

            const generateReport = async () => {
              try {
                console.log("Gerando relat√≥rio...");
                const pendentes = vaos.filter(vao => vao.status === 'pendente').length;
                const iniciados = vaos.filter(vao => vao.status === 'iniciado').length;
                const concluidos = vaos.filter(vao => vao.status === 'concluido').length;
                const total = vaos.length;
                
                const percentConcluido = total > 0 ? Math.round((concluidos / total) * 100) : 0;
                
                let vaosList = '';
                vaos.forEach(vao => {
                  vaosList += `
                    <tr>
                      <td>${vao.descricao}</td>
                      <td>${vao.localizacao}</td>
                      <td>${vao.area}</td>
                      <td>${vao.dataNecessidade}</td>
                      <td style="color: ${getStatusColor(vao.status)}">${getStatusText(vao.status)}</td>
                    </tr>
                  `;
                });

                const html = `
                  <html>
                    <head>
                      <meta charset="UTF-8">
                      <meta name="viewport" content="width=device-width, initial-scale=1.0">
                      <style>
                        body { font-family: Arial, sans-serif; padding: 20px; }
                        h1 { color: #4CAF50; text-align: center; }
                        .header { text-align: center; margin-bottom: 30px; }
                        .summary { margin: 20px 0; padding: 15px; background-color: #f5f5f5; border-radius: 5px; }
                        .progress-container { height: 20px; background-color: #e0e0e0; border-radius: 10px; margin: 15px 0; }
                        .progress-bar { height: 100%; width: ${percentConcluido}%; background-color: #4CAF50; border-radius: 10px; }
                        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                        th { background-color: #4CAF50; color: white; }
                        tr:nth-child(even) { background-color: #f2f2f2; }
                        .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #666; }
                      </style>
                    </head>
                    <body>
                      <div class="header">
                        <h1>Relat√≥rio de Corte de Matos</h1>
                        <p>Data de gera√ß√£o: ${new Date().toLocaleDateString()}</p>
                      </div>
                      
                      <div class="summary">
                        <h2>Resumo</h2>
                        <p>Total de v√£os: ${total}</p>
                        <p>Pendentes: ${pendentes}</p>
                        <p>Iniciados: ${iniciados}</p>
                        <p>Conclu√≠dos: ${concluidos}</p>
                        
                        <h3>Progresso: ${percentConcluido}%</h3>
                        <div class="progress-container">
                          <div class="progress-bar"></div>
                        </div>
                      </div>
                      
                      <h2>Detalhes dos V√£os</h2>
                      <table>
                        <thead>
                          <tr>
                            <th>Descri√ß√£o</th>
                            <th>Localiza√ß√£o</th>
                            <th>√Årea</th>
                            <th>Data Necessidade</th>
                            <th>Status</th>
                          </tr>
                        </thead>
                        <tbody>
                          ${vaosList}
                        </tbody>
                      </table>
                      
                      <div class="footer">
                        <p>Aplicativo de Controle de Corte de Matos - v1.1.0</p>
                      </div>
                    </body>
                  </html>
                `;

                console.log("Criando PDF com Expo Print...");
                const { uri } = await Print.printToFileAsync({ html });
                
                console.log("PDF gerado em:", uri);
                
                if (await Sharing.isAvailableAsync()) {
                  console.log("Compartilhando PDF...");
                  await Sharing.shareAsync(uri);
                } else {
                  Alert.alert(
                    'Erro',
                    'Compartilhamento n√£o est√° dispon√≠vel neste dispositivo'
                  );
                }
              } catch (error) {
                console.error('Erro ao gerar relat√≥rio:', error);
                Alert.alert('Erro', 'N√£o foi poss√≠vel gerar o relat√≥rio. Tente novamente.');
              }
            };

            // Tela de loading
            if (isLoading) {
              return (
                <View style={{flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#f5f5f5'}}>
                  <MaterialIcons name="nature" size={100} color="#4CAF50" />
                  <Text style={{fontSize: 22, fontWeight: 'bold', color: '#4CAF50', marginTop: 20}}>
                    Corte de Matos
                  </Text>
                  <Text style={{marginTop: 20, color: '#666'}}>
                    Carregando aplicativo...
                  </Text>
                </View>
              );
            }

            // Tela de erro de inicializa√ß√£o
            if (hasInitError) {
              return (
                <View style={{flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20, backgroundColor: '#f5f5f5'}}>
                  <MaterialIcons name="error-outline" size={80} color="#d32f2f" />
                  <Text style={{fontSize: 22, fontWeight: 'bold', color: '#d32f2f', marginTop: 20, marginBottom: 10}}>
                    Erro de Inicializa√ß√£o
                  </Text>
                  <Text style={{textAlign: 'center', marginBottom: 20}}>
                    N√£o foi poss√≠vel iniciar o aplicativo corretamente. 
                    Isso pode ser causado por dados corrompidos ou falta de permiss√µes.
                  </Text>
                  <TouchableOpacity
                    style={{backgroundColor: '#4CAF50', padding: 15, borderRadius: 5, marginTop: 10}}
                    onPress={async () => {
                      try {
                        await AsyncStorage.clear();
                        Alert.alert(
                          "Dados Resetados", 
                          "Os dados do aplicativo foram resetados. Reinicie o aplicativo.",
                          [{ text: "OK" }]
                        );
                      } catch (error) {
                        console.error("Erro ao limpar dados:", error);
                        Alert.alert("Erro", "N√£o foi poss√≠vel limpar os dados. Tente reinstalar o aplicativo.");
                      }
                    }}
                  >
                    <Text style={{color: 'white', fontWeight: 'bold'}}>Resetar Dados</Text>
                  </TouchableOpacity>
                </View>
              );
            }

            // Tela de login
            if (!user) {
              return <LoginScreen onLogin={handleLogin} />;
            }

            // Tela principal do app
            return (
              <SafeAreaView style={styles.container}>
                <View style={styles.header}>
                  <Text style={styles.title}>Corte de Matos</Text>
                  <View style={styles.userInfo}>
                    <Text style={styles.userText}>
                      {user.username} ({user.role === 'admin' ? 'Admin' : 'Usu√°rio'})
                    </Text>
                    <TouchableOpacity onPress={handleLogout} style={styles.logoutButton}>
                      <MaterialIcons name="exit-to-app" size={24} color="white" />
                    </TouchableOpacity>
                  </View>
                </View>

                <SyncStatus 
                  isOnline={isOnline} 
                  lastSync={lastSync} 
                  onSync={handleSync} 
                />

                <View style={styles.actions}>
                  {user.role === 'admin' && (
                    <TouchableOpacity style={styles.button} onPress={pickExcel}>
                      <MaterialIcons name="file-upload" size={24} color="white" />
                      <Text style={styles.buttonText}>Importar Excel</Text>
                    </TouchableOpacity>
                  )}
                  
                  <TouchableOpacity style={styles.button} onPress={generateReport}>
                    <MaterialIcons name="description" size={24} color="white" />
                    <Text style={styles.buttonText}>Gerar Relat√≥rio</Text>
                  </TouchableOpacity>
                </View>

                <Text style={styles.sectionTitle}>Lista de V√£os ({vaos.length})</Text>
                
                {vaos.length > 0 ? (
                  <FlatList
                    data={vaos}
                    keyExtractor={(item) => item.id.toString()}
                    renderItem={({ item }) => (
                      <TouchableOpacity
                        style={[
                          styles.vaoItem,
                          { borderLeftColor: getStatusColor(item.status) }
                        ]}
                        onPress={() => openVaoDetails(item)}
                      >
                        <View style={styles.vaoHeader}>
                          <Text style={styles.vaoTitle}>{item.descricao}</Text>
                          <View style={styles.vaoStatusContainer}>
                            {isUrgent(item.dataNecessidade) && !isLate(item.dataNecessidade) && (
                              <Text style={styles.urgentIcon}>üïê</Text>
                            )}
                            {isLate(item.dataNecessidade) && item.status !== 'concluido' && (
                              <Text style={styles.lateIcon}>‚ö†Ô∏è</Text>
                            )}
                            <View 
                              style={[
                                styles.vaoStatusBadge, 
                                { backgroundColor: getStatusColor(item.status) }
                              ]}
                            >
                              <Text style={styles.vaoStatusText}>{getStatusText(item.status)}</Text>
                            </View>
                          </View>
                        </View>
                        
                        <Text style={styles.vaoLocation}>{item.localizacao}</Text>
                        <Text style={styles.vaoArea}>√Årea: {item.area}m¬≤</Text>
                        <Text style={[
                          styles.vaoDate,
                          isLate(item.dataNecessidade) && item.status !== 'concluido' ? styles.lateDate : null,
                          isUrgent(item.dataNecessidade) && !isLate(item.dataNecessidade) ? styles.urgentDate : null
                        ]}>
                          Data necessidade: {item.dataNecessidade}
                        </Text>
                      </TouchableOpacity>
                    )}
                  />
                ) : (
                  <View style={styles.emptyContainer}>
                    <MaterialIcons name="nature" size={80} color="#e0e0e0" />
                    <Text style={styles.emptyText}>Nenhum v√£o cadastrado</Text>
                    {user.role === 'admin' ? (
                      <Text style={styles.emptySubText}>Importe um arquivo Excel para come√ßar</Text>
                    ) : (
                      <Text style={styles.emptySubText}>Aguarde o administrador importar os dados</Text>
                    )}
                  </View>
                )}

                <Modal
                  animationType="slide"
                  transparent={true}
                  visible={modalVisible}
                  onRequestClose={() => setModalVisible(false)}
                >
                  <View style={styles.modalContainer}>
                    <View style={styles.modalContent}>
                      {selectedVao && (
                        <>
                          <View style={styles.modalHeader}>
                            <Text style={styles.modalTitle}>{selectedVao.descricao}</Text>
                            <TouchableOpacity 
                              style={styles.closeButton} 
                              onPress={() => setModalVisible(false)}
                            >
                              <MaterialIcons name="close" size={24} color="#333" />
                            </TouchableOpacity>
                          </View>
                          
                          <ScrollView style={styles.modalBody}>
                            <View style={styles.modalSection}>
                              <Text style={styles.modalLabel}>Localiza√ß√£o:</Text>
                              <Text style={styles.modalValue}>{selectedVao.localizacao}</Text>
                            </View>
                            
                            <View style={styles.modalSection}>
                              <Text style={styles.modalLabel}>√Årea:</Text>
                              <Text style={styles.modalValue}>{selectedVao.area}m¬≤</Text>
                            </View>
                            
                            <View style={styles.modalSection}>
                              <Text style={styles.modalLabel}>Data de necessidade:</Text>
                              <Text style={[
                                styles.modalValue,
                                isLate(selectedVao.dataNecessidade) && selectedVao.status !== 'concluido' ? styles.lateDate : null
                              ]}>
                                {selectedVao.dataNecessidade}
                                {isLate(selectedVao.dataNecessidade) && selectedVao.status !== 'concluido' && ' ‚ö†Ô∏è ATRASADO'}
                              </Text>
                            </View>
                            
                            <View style={styles.modalSection}>
                              <Text style={styles.modalLabel}>Status atual:</Text>
                              <View style={[
                                styles.statusBadge,
                                { backgroundColor: getStatusColor(selectedVao.status) }
                              ]}>
                                <Text style={styles.statusBadgeText}>{getStatusText(selectedVao.status)}</Text>
                              </View>
                            </View>
                            
                            {selectedVao.dataInicio && (
                              <View style={styles.modalSection}>
                                <Text style={styles.modalLabel}>Data de in√≠cio:</Text>
                                <Text style={styles.modalValue}>{selectedVao.dataInicio}</Text>
                              </View>
                            )}
                            
                            {selectedVao.dataConclusao && (
                              <View style={styles.modalSection}>
                                <Text style={styles.modalLabel}>Data de conclus√£o:</Text>
                                <Text style={styles.modalValue}>{selectedVao.dataConclusao}</Text>
                              </View>
                            )}
                          </ScrollView>
                          
                          <View style={styles.modalActions}>
                            {selectedVao.status === 'pendente' && (
                              <TouchableOpacity
                                style={[styles.actionButton, styles.startButton]}
                                onPress={() => updateVaoStatus(selectedVao.id, 'iniciado')}
                              >
                                <MaterialIcons name="play-arrow" size={16} color="white" />
                                <Text style={styles.actionButtonText}>Iniciar</Text>
                              </TouchableOpacity>
                            )}
                            
                            {(selectedVao.status === 'pendente' || selectedVao.status === 'iniciado') && (
                              <TouchableOpacity
                                style={[styles.actionButton, styles.completeButton]}
                                onPress={() => updateVaoStatus(selectedVao.id, 'concluido')}
                              >
                                <MaterialIcons name="check" size={16} color="white" />
                                <Text style={styles.actionButtonText}>Concluir</Text>
                              </TouchableOpacity>
                            )}
                          </View>
                        </>
                      )}
                    </View>
                  </View>
                </Modal>

                <StatusBar style="auto" />
              </SafeAreaView>
            );
          };

          export default function App() {
            return <AppWithErrorBoundary />;
          }

          const styles = StyleSheet.create({
            container: {
              flex: 1,
              backgroundColor: '#f5f5f5',
            },
            header: {
              backgroundColor: '#4CAF50',
              padding: 16,
              paddingTop: 50,
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
            },
            title: {
              color: 'white',
              fontSize: 20,
              fontWeight: 'bold',
            },
            userInfo: {
              flexDirection: 'row',
              alignItems: 'center',
            },
            userText: {
              color: 'white',
              marginRight: 8,
            },
            logoutButton: {
              padding: 5,
            },
            actions: {
              flexDirection: 'row',
              padding: 16,
              justifyContent: 'space-around',
            },
            button: {
              backgroundColor: '#4CAF50',
              flexDirection: 'row',
              alignItems: 'center',
              padding: 10,
              borderRadius: 5,
              minWidth: 150,
              justifyContent: 'center',
            },
            buttonText: {
              color: 'white',
              marginLeft: 8,
            },
            sectionTitle: {
              fontSize: 18,
              fontWeight: 'bold',
              margin: 16,
              marginBottom: 8,
            },
            vaoItem: {
              backgroundColor: 'white',
              padding: 16,
              marginHorizontal: 16,
              marginBottom: 8,
              borderRadius: 5,
              borderLeftWidth: 5,
              elevation: 2,
            },
            vaoHeader: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: 5,
            },
            vaoTitle: {
              fontSize: 16,
              fontWeight: 'bold',
              flex: 1,
            },
            vaoStatusContainer: {
              flexDirection: 'row',
              alignItems: 'center',
            },
            vaoStatusBadge: {
              paddingHorizontal: 8,
              paddingVertical: 3,
              borderRadius: 10,
            },
            vaoStatusText: {
              color: 'white',
              fontSize: 12,
            },
            vaoLocation: {
              color: '#555',
              marginBottom: 5,
            },
            vaoArea: {
              color: '#555',
              marginBottom: 5,
            },
            vaoDate: {
              color: '#555',
            },
            lateDate: {
              color: '#d32f2f',
              fontWeight: 'bold',
            },
            urgentDate: {
              color: '#ff9800',
              fontWeight: 'bold',
            },
            urgentIcon: {
              marginRight: 5,
              fontSize: 16,
            },
            lateIcon: {
              marginRight: 5,
              fontSize: 16,
            },
            emptyContainer: {
              flex: 1,
              justifyContent: 'center',
              alignItems: 'center',
              padding: 20,
            },
            emptyText: {
              fontSize: 18,
              fontWeight: 'bold',
              color: '#9e9e9e',
              marginTop: 10,
            },
            emptySubText: {
              color: '#9e9e9e',
              textAlign: 'center',
              marginTop: 5,
            },
            modalContainer: {
              flex: 1,
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: 'rgba(0, 0, 0, 0.5)',
            },
            modalContent: {
              backgroundColor: 'white',
              width: '90%',
              borderRadius: 10,
              overflow: 'hidden',
              maxHeight: '80%',
            },
            modalHeader: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              padding: 16,
              backgroundColor: '#f5f5f5',
              borderBottomWidth: 1,
              borderBottomColor: '#e0e0e0',
            },
            modalTitle: {
              fontSize: 18,
              fontWeight: 'bold',
              flex: 1,
            },
            closeButton: {
              padding: 5,
            },
            modalBody: {
              padding: 16,
              maxHeight: 300,
            },
            modalSection: {
              marginBottom: 12,
            },
            modalLabel: {
              color: '#666',
              fontSize: 14,
              marginBottom: 2,
            },
            modalValue: {
              fontSize: 16,
            },
            statusBadge: {
              alignSelf: 'flex-start',
              paddingHorizontal: 10,
              paddingVertical: 5,
              borderRadius: 15,
              marginTop: 2,
            },
            statusBadgeText: {
              color: 'white',
              fontWeight: 'bold',
            },
            modalActions: {
              flexDirection: 'row',
              justifyContent: 'flex-end',
              padding: 16,
              borderTopWidth: 1,
              borderTopColor: '#e0e0e0',
            },
            actionButton: {
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 8,
              paddingHorizontal: 12,
              borderRadius: 5,
              marginLeft: 8,
            },
            actionButtonText: {
              color: 'white',
              marginLeft: 5,
              fontWeight: 'bold',
            },
            startButton: {
              backgroundColor: '#FFC107',
            },
            completeButton: {
              backgroundColor: '#4CAF50',
            },
            // Login styles
            loginContainer: {
              flex: 1,
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: '#f5f5f5',
              padding: 20,
            },
            logoContainer: {
              alignItems: 'center',
              marginBottom: 40,
            },
            logoText: {
              fontSize: 28,
              fontWeight: 'bold',
              color: '#4CAF50',
              marginTop: 10,
            },
            formContainer: {
              width: '100%',
              maxWidth: 300,
            },
            input: {
              backgroundColor: 'white',
              padding: 15,
              borderRadius: 5,
              marginBottom: 15,
              borderWidth: 1,
              borderColor: '#ddd',
            },
            errorText: {
              color: 'red',
              marginBottom: 15,
              textAlign: 'center',
            },
            loginButton: {
              backgroundColor: '#4CAF50',
              padding: 15,
              borderRadius: 5,
              alignItems: 'center',
            },
            loginButtonText: {
              color: 'white',
              fontWeight: 'bold',
              fontSize: 16,
            },
            // Sync styles
            syncContainer: {
              backgroundColor: '#e8f5e9',
              padding: 10,
              margin: 16,
              borderRadius: 5,
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              flexWrap: 'wrap',
            },
            syncText: {
              fontSize: 12,
              color: '#2e7d32',
              marginRight: 5,
            },
            syncButton: {
              backgroundColor: '#4CAF50',
              paddingHorizontal: 10,
              paddingVertical: 5,
              borderRadius: 15,
            },
            syncButtonDisabled: {
              backgroundColor: '#9E9E9E',
            },
            syncButtonText: {
              color: 'white',
              fontSize: 12,
            },
          });
          EOF

          export default function App() {
            const [vaos, setVaos] = useState([]);
            const [modalVisible, setModalVisible] = useState(false);
            const [selectedVao, setSelectedVao] = useState(null);
            const [user, setUser] = useState(null);
            const [isOnline, setIsOnline] = useState(false);
            const [lastSync, setLastSync] = useState(null);

            // Carrega usu√°rio do armazenamento local
            useEffect(() => {
              const loadUser = async () => {
                try {
                  const savedUser = await AsyncStorage.getItem('user');
                  if (savedUser) {
                    setUser(JSON.parse(savedUser));
                  }
                } catch (error) {
                  console.error('Erro ao carregar usu√°rio:', error);
                }
              };

              loadUser();
              
              // Simula√ß√£o de status online
              const interval = setInterval(() => {
                // Simulando conex√£o online/offline (70% chance de estar online)
                setIsOnline(Math.random() > 0.3);
              }, 10000);
              
              return () => clearInterval(interval);
            }, []);

            // Carrega vaos do armazenamento local
            useEffect(() => {
              const loadVaos = async () => {
                try {
                  const savedVaos = await AsyncStorage.getItem('vaos');
                  if (savedVaos) {
                    setVaos(JSON.parse(savedVaos));
                  }
                } catch (error) {
                  console.error('Erro ao carregar vaos:', error);
                }
              };

              loadVaos();
            }, []);

            // Salva vaos no armazenamento local
            useEffect(() => {
              const saveVaos = async () => {
                try {
                  await AsyncStorage.setItem('vaos', JSON.stringify(vaos));
                } catch (error) {
                  console.error('Erro ao salvar vaos:', error);
                }
              };

              if (vaos.length > 0) {
                saveVaos();
              }
            }, [vaos]);

            const handleLogin = async (loggedUser) => {
              setUser(loggedUser);
              try {
                await AsyncStorage.setItem('user', JSON.stringify(loggedUser));
              } catch (error) {
                console.error('Erro ao salvar usu√°rio:', error);
              }
            };

            const handleLogout = async () => {
              setUser(null);
              try {
                await AsyncStorage.removeItem('user');
              } catch (error) {
                console.error('Erro ao remover usu√°rio:', error);
              }
            };

            const handleSync = () => {
              if (!isOnline) {
                Alert.alert("Erro", "Voc√™ est√° offline. N√£o √© poss√≠vel sincronizar.");
                return;
              }
              
              // Simula√ß√£o de sincroniza√ß√£o
              Alert.alert(
                "Sincroniza√ß√£o",
                "Sincronizando dados com o servidor...",
                [{ text: "OK" }]
              );
              
              const now = new Date().toLocaleString();
              setLastSync(now);
              
              // Salvar data de sincroniza√ß√£o
              AsyncStorage.setItem('lastSync', now);
            };

            const pickExcel = async () => {
              try {
                const result = await DocumentPicker.getDocumentAsync({
                  type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                });

                if (result.canceled) {
                  return;
                }

                const { uri } = result.assets[0];
                const response = await fetch(uri);
                const blob = await response.blob();
                const reader = new FileReader();

                reader.onload = (e) => {
                  const data = new Uint8Array(e.target.result);
                  const workbook = XLSX.read(data, { type: 'array' });
                  const sheetName = workbook.SheetNames[0];
                  const worksheet = workbook.Sheets[sheetName];
                  const jsonData = XLSX.utils.sheet_to_json(worksheet);

                  // Transformando os dados do Excel
                  const newVaos = jsonData.map((item, index) => ({
                    id: Date.now() + index,
                    descricao: item.Descricao || 'Sem descri√ß√£o',
                    localizacao: item.Localizacao || 'Sem localiza√ß√£o',
                    area: item.Area || 0,
                    dataNecessidade: item.DataNecessidade || new Date().toISOString().split('T')[0],
                    status: 'pendente',
                    dataInicio: null,
                    dataConclusao: null,
                  }));

                  setVaos([...vaos, ...newVaos]);
                  Alert.alert('Sucesso', `${newVaos.length} v√£os importados com sucesso!`);
                };

                reader.readAsArrayBuffer(blob);
              } catch (error) {
                console.error('Erro ao ler o arquivo:', error);
                Alert.alert('Erro', 'N√£o foi poss√≠vel ler o arquivo Excel.');
              }
            };

            const openVaoDetails = (vao) => {
              setSelectedVao(vao);
              setModalVisible(true);
            };

            const updateVaoStatus = (id, newStatus) => {
              const updatedVaos = vaos.map((vao) => {
                if (vao.id === id) {
                  if (newStatus === 'iniciado' && vao.status === 'pendente') {
                    return { ...vao, status: newStatus, dataInicio: new Date().toISOString().split('T')[0] };
                  } else if (newStatus === 'concluido' && (vao.status === 'pendente' || vao.status === 'iniciado')) {
                    return { 
                      ...vao, 
                      status: newStatus, 
                      dataInicio: vao.dataInicio || new Date().toISOString().split('T')[0],
                      dataConclusao: new Date().toISOString().split('T')[0] 
                    };
                  }
                }
                return vao;
              });

              setVaos(updatedVaos);
              setModalVisible(false);
            };

            const getStatusColor = (status) => {
              switch (status) {
                case 'pendente':
                  return '#9E9E9E';
                case 'iniciado':
                  return '#FFC107';
                case 'concluido':
                  return '#4CAF50';
                default:
                  return '#9E9E9E';
              }
            };

            const getStatusText = (status) => {
              switch (status) {
                case 'pendente':
                  return 'Pendente';
                case 'iniciado':
                  return 'Iniciado';
                case 'concluido':
                  return 'Conclu√≠do';
                default:
                  return 'Desconhecido';
              }
            };

            const isUrgent = (dataNecessidade) => {
              const today = new Date();
              const necessidade = new Date(dataNecessidade);
              const diffTime = necessidade - today;
              const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
              return diffDays <= 7 && diffDays > 0;
            };

            const isLate = (dataNecessidade) => {
              const today = new Date();
              const necessidade = new Date(dataNecessidade);
              return necessidade < today;
            };

            const generateReport = async () => {
              try {
                const pendentes = vaos.filter(vao => vao.status === 'pendente').length;
                const iniciados = vaos.filter(vao => vao.status === 'iniciado').length;
                const concluidos = vaos.filter(vao => vao.status === 'concluido').length;
                const total = vaos.length;
                
                const percentConcluido = total > 0 ? Math.round((concluidos / total) * 100) : 0;
                
                let vaosList = '';
                vaos.forEach(vao => {
                  vaosList += `
                    <tr>
                      <td>${vao.descricao}</td>
                      <td>${vao.localizacao}</td>
                      <td>${vao.area}</td>
                      <td>${vao.dataNecessidade}</td>
                      <td style="color: ${getStatusColor(vao.status)}">${getStatusText(vao.status)}</td>
                    </tr>
                  `;
                });

                const html = `
                  <html>
                    <head>
                      <style>
                        body { font-family: Arial, sans-serif; padding: 20px; }
                        h1 { color: #4CAF50; text-align: center; }
                        .header { text-align: center; margin-bottom: 30px; }
                        .summary { margin: 20px 0; padding: 15px; background-color: #f5f5f5; border-radius: 5px; }
                        .progress-container { height: 20px; background-color: #e0e0e0; border-radius: 10px; margin: 15px 0; }
                        .progress-bar { height: 100%; width: ${percentConcluido}%; background-color: #4CAF50; border-radius: 10px; }
                        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                        th { background-color: #4CAF50; color: white; }
                        tr:nth-child(even) { background-color: #f2f2f2; }
                        .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #666; }
                      </style>
                    </head>
                    <body>
                      <div class="header">
                        <h1>Relat√≥rio de Corte de Matos</h1>
                        <p>Data de gera√ß√£o: ${new Date().toLocaleDateString()}</p>
                      </div>
                      
                      <div class="summary">
                        <h2>Resumo</h2>
                        <p>Total de v√£os: ${total}</p>
                        <p>Pendentes: ${pendentes}</p>
                        <p>Iniciados: ${iniciados}</p>
                        <p>Conclu√≠dos: ${concluidos}</p>
                        
                        <h3>Progresso: ${percentConcluido}%</h3>
                        <div class="progress-container">
                          <div class="progress-bar"></div>
                        </div>
                      </div>
                      
                      <h2>Detalhes dos V√£os</h2>
                      <table>
                        <thead>
                          <tr>
                            <th>Descri√ß√£o</th>
                            <th>Localiza√ß√£o</th>
                            <th>√Årea</th>
                            <th>Data Necessidade</th>
                            <th>Status</th>
                          </tr>
                        </thead>
                        <tbody>
                          ${vaosList}
                        </tbody>
                      </table>
                      
                      <div class="footer">
                        <p>Aplicativo de Controle de Corte de Matos - v1.1.0</p>
                      </div>
                    </body>
                  </html>
                `;

                const { uri } = await Print.printToFileAsync({ html });
                
                if (await Sharing.isAvailableAsync()) {
                  await Sharing.shareAsync(uri);
                } else {
                  Alert.alert(
                    'Erro',
                    'Compartilhamento n√£o est√° dispon√≠vel neste dispositivo'
                  );
                }
              } catch (error) {
                console.error('Erro ao gerar relat√≥rio:', error);
                Alert.alert('Erro', 'N√£o foi poss√≠vel gerar o relat√≥rio.');
              }
            };

            if (!user) {
              return <LoginScreen onLogin={handleLogin} />;
            }

            return (
              <View style={styles.container}>
                <View style={styles.header}>
                  <Text style={styles.title}>Corte de Matos</Text>
                  <View style={styles.userInfo}>
                    <Text style={styles.userText}>
                      {user.username} ({user.role === 'admin' ? 'Admin' : 'Usu√°rio'})
                    </Text>
                    <TouchableOpacity onPress={handleLogout} style={styles.logoutButton}>
                      <MaterialIcons name="exit-to-app" size={24} color="white" />
                    </TouchableOpacity>
                  </View>
                </View>

                <SyncStatus 
                  isOnline={isOnline} 
                  lastSync={lastSync} 
                  onSync={handleSync} 
                />

                <View style={styles.actions}>
                  {user.role === 'admin' && (
                    <TouchableOpacity style={styles.button} onPress={pickExcel}>
                      <MaterialIcons name="file-upload" size={24} color="white" />
                      <Text style={styles.buttonText}>Importar Excel</Text>
                    </TouchableOpacity>
                  )}
                  
                  <TouchableOpacity style={styles.button} onPress={generateReport}>
                    <MaterialIcons name="description" size={24} color="white" />
                    <Text style={styles.buttonText}>Gerar Relat√≥rio</Text>
                  </TouchableOpacity>
                </View>

                <Text style={styles.sectionTitle}>Lista de V√£os ({vaos.length})</Text>
                
                {vaos.length > 0 ? (
                  <FlatList
                    data={vaos}
                    keyExtractor={(item) => item.id.toString()}
                    renderItem={({ item }) => (
                      <TouchableOpacity
                        style={[
                          styles.vaoItem,
                          { borderLeftColor: getStatusColor(item.status) }
                        ]}
                        onPress={() => openVaoDetails(item)}
                      >
                        <View style={styles.vaoHeader}>
                          <Text style={styles.vaoTitle}>{item.descricao}</Text>
                          <View style={styles.vaoStatusContainer}>
                            {isUrgent(item.dataNecessidade) && !isLate(item.dataNecessidade) && (
                              <Text style={styles.urgentIcon}>üïê</Text>
                            )}
                            {isLate(item.dataNecessidade) && item.status !== 'concluido' && (
                              <Text style={styles.lateIcon}>‚ö†Ô∏è</Text>
                            )}
                            <View 
                              style={[
                                styles.vaoStatusBadge, 
                                { backgroundColor: getStatusColor(item.status) }
                              ]}
                            >
                              <Text style={styles.vaoStatusText}>{getStatusText(item.status)}</Text>
                            </View>
                          </View>
                        </View>
                        
                        <Text style={styles.vaoLocation}>{item.localizacao}</Text>
                        <Text style={styles.vaoArea}>√Årea: {item.area}m¬≤</Text>
                        <Text style={[
                          styles.vaoDate,
                          isLate(item.dataNecessidade) && item.status !== 'concluido' ? styles.lateDate : null,
                          isUrgent(item.dataNecessidade) && !isLate(item.dataNecessidade) ? styles.urgentDate : null
                        ]}>
                          Data necessidade: {item.dataNecessidade}
                        </Text>
                      </TouchableOpacity>
                    )}
                  />
                ) : (
                  <View style={styles.emptyContainer}>
                    <MaterialIcons name="nature" size={80} color="#e0e0e0" />
                    <Text style={styles.emptyText}>Nenhum v√£o cadastrado</Text>
                    {user.role === 'admin' ? (
                      <Text style={styles.emptySubText}>Importe um arquivo Excel para come√ßar</Text>
                    ) : (
                      <Text style={styles.emptySubText}>Aguarde o administrador importar os dados</Text>
                    )}
                  </View>
                )}

                <Modal
                  animationType="slide"
                  transparent={true}
                  visible={modalVisible}
                  onRequestClose={() => setModalVisible(false)}
                >
                  <View style={styles.modalContainer}>
                    <View style={styles.modalContent}>
                      {selectedVao && (
                        <>
                          <View style={styles.modalHeader}>
                            <Text style={styles.modalTitle}>{selectedVao.descricao}</Text>
                            <TouchableOpacity 
                              style={styles.closeButton} 
                              onPress={() => setModalVisible(false)}
                            >
                              <MaterialIcons name="close" size={24} color="#333" />
                            </TouchableOpacity>
                          </View>
                          
                          <ScrollView style={styles.modalBody}>
                            <View style={styles.modalSection}>
                              <Text style={styles.modalLabel}>Localiza√ß√£o:</Text>
                              <Text style={styles.modalValue}>{selectedVao.localizacao}</Text>
                            </View>
                            
                            <View style={styles.modalSection}>
                              <Text style={styles.modalLabel}>√Årea:</Text>
                              <Text style={styles.modalValue}>{selectedVao.area}m¬≤</Text>
                            </View>
                            
                            <View style={styles.modalSection}>
                              <Text style={styles.modalLabel}>Data de necessidade:</Text>
                              <Text style={[
                                styles.modalValue,
                                isLate(selectedVao.dataNecessidade) && selectedVao.status !== 'concluido' ? styles.lateDate : null
                              ]}>
                                {selectedVao.dataNecessidade}
                                {isLate(selectedVao.dataNecessidade) && selectedVao.status !== 'concluido' && ' ‚ö†Ô∏è ATRASADO'}
                                {isUrgent(selectedVao.dataNecessidade) && !isLate(selectedVao.dataNecessidade) && ' üïê URGENTE'}
                              </Text>
                            </View>
                            
                            <View style={styles.modalSection}>
                              <Text style={styles.modalLabel}>Status atual:</Text>
                              <View style={[
                                styles.statusBadge, 
                                { backgroundColor: getStatusColor(selectedVao.status) }
                              ]}>
                                <Text style={styles.statusBadgeText}>{getStatusText(selectedVao.status)}</Text>
                              </View>
                            </View>
                            
                            {selectedVao.dataInicio && (
                              <View style={styles.modalSection}>
                                <Text style={styles.modalLabel}>Data de in√≠cio:</Text>
                                <Text style={styles.modalValue}>{selectedVao.dataInicio}</Text>
                              </View>
                            )}
                            
                            {selectedVao.dataConclusao && (
                              <View style={styles.modalSection}>
                                <Text style={styles.modalLabel}>Data de conclus√£o:</Text>
                                <Text style={styles.modalValue}>{selectedVao.dataConclusao}</Text>
                              </View>
                            )}
                          </ScrollView>
                          
                          <View style={styles.modalActions}>
                            {selectedVao.status === 'pendente' && (
                              <TouchableOpacity 
                                style={[styles.actionButton, styles.startButton]} 
                                onPress={() => updateVaoStatus(selectedVao.id, 'iniciado')}
                              >
                                <MaterialIcons name="play-arrow" size={18} color="white" />
                                <Text style={styles.actionButtonText}>Iniciar</Text>
                              </TouchableOpacity>
                            )}
                            
                            {(selectedVao.status === 'pendente' || selectedVao.status === 'iniciado') && (
                              <TouchableOpacity 
                                style={[styles.actionButton, styles.completeButton]} 
                                onPress={() => updateVaoStatus(selectedVao.id, 'concluido')}
                              >
                                <MaterialIcons name="check" size={18} color="white" />
                                <Text style={styles.actionButtonText}>Concluir</Text>
                              </TouchableOpacity>
                            )}
                          </View>
                        </>
                      )}
                    </View>
                  </View>
                </Modal>

                <StatusBar style="auto" />
              </View>
            );
          }

          const styles = StyleSheet.create({
            container: {
              flex: 1,
              backgroundColor: '#f5f5f5',
            },
            header: {
              backgroundColor: '#4CAF50',
              padding: 16,
              paddingTop: 50,
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
            },
            title: {
              color: 'white',
              fontSize: 20,
              fontWeight: 'bold',
            },
            userInfo: {
              flexDirection: 'row',
              alignItems: 'center',
            },
            userText: {
              color: 'white',
              marginRight: 8,
            },
            logoutButton: {
              padding: 5,
            },
            actions: {
              flexDirection: 'row',
              padding: 16,
              justifyContent: 'space-around',
            },
            button: {
              backgroundColor: '#4CAF50',
              flexDirection: 'row',
              alignItems: 'center',
              padding: 10,
              borderRadius: 5,
              minWidth: 150,
              justifyContent: 'center',
            },
            buttonText: {
              color: 'white',
              marginLeft: 8,
            },
            sectionTitle: {
              fontSize: 18,
              fontWeight: 'bold',
              margin: 16,
              marginBottom: 8,
            },
            vaoItem: {
              backgroundColor: 'white',
              padding: 16,
              marginHorizontal: 16,
              marginBottom: 8,
              borderRadius: 5,
              borderLeftWidth: 5,
              elevation: 2,
            },
            vaoHeader: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: 5,
            },
            vaoTitle: {
              fontSize: 16,
              fontWeight: 'bold',
              flex: 1,
            },
            vaoStatusContainer: {
              flexDirection: 'row',
              alignItems: 'center',
            },
            vaoStatusBadge: {
              paddingHorizontal: 8,
              paddingVertical: 3,
              borderRadius: 10,
            },
            vaoStatusText: {
              color: 'white',
              fontSize: 12,
            },
            vaoLocation: {
              color: '#555',
              marginBottom: 5,
            },
            vaoArea: {
              color: '#555',
              marginBottom: 5,
            },
            vaoDate: {
              color: '#555',
            },
            lateDate: {
              color: '#d32f2f',
              fontWeight: 'bold',
            },
            urgentDate: {
              color: '#ff9800',
              fontWeight: 'bold',
            },
            urgentIcon: {
              marginRight: 5,
              fontSize: 16,
            },
            lateIcon: {
              marginRight: 5,
              fontSize: 16,
            },
            emptyContainer: {
              flex: 1,
              justifyContent: 'center',
              alignItems: 'center',
              padding: 20,
            },
            emptyText: {
              fontSize: 18,
              fontWeight: 'bold',
              color: '#9e9e9e',
              marginTop: 10,
            },
            emptySubText: {
              color: '#9e9e9e',
              textAlign: 'center',
              marginTop: 5,
            },
            modalContainer: {
              flex: 1,
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: 'rgba(0, 0, 0, 0.5)',
            },
            modalContent: {
              backgroundColor: 'white',
              width: '90%',
              borderRadius: 10,
              overflow: 'hidden',
              maxHeight: '80%',
            },
            modalHeader: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              padding: 16,
              backgroundColor: '#f5f5f5',
              borderBottomWidth: 1,
              borderBottomColor: '#e0e0e0',
            },
            modalTitle: {
              fontSize: 18,
              fontWeight: 'bold',
              flex: 1,
            },
            closeButton: {
              padding: 5,
            },
            modalBody: {
              padding: 16,
              maxHeight: 300,
            },
            modalSection: {
              marginBottom: 12,
            },
            modalLabel: {
              color: '#666',
              fontSize: 14,
              marginBottom: 2,
            },
            modalValue: {
              fontSize: 16,
            },
            statusBadge: {
              alignSelf: 'flex-start',
              paddingHorizontal: 10,
              paddingVertical: 5,
              borderRadius: 15,
              marginTop: 2,
            },
            statusBadgeText: {
              color: 'white',
              fontWeight: 'bold',
            },
            modalActions: {
              flexDirection: 'row',
              justifyContent: 'flex-end',
              padding: 16,
              borderTopWidth: 1,
              borderTopColor: '#e0e0e0',
            },
            actionButton: {
              flexDirection: 'row',
              alignItems: 'center',
              paddingVertical: 8,
              paddingHorizontal: 12,
              borderRadius: 5,
              marginLeft: 8,
            },
            actionButtonText: {
              color: 'white',
              marginLeft: 5,
              fontWeight: 'bold',
            },
            startButton: {
              backgroundColor: '#FFC107',
            },
            completeButton: {
              backgroundColor: '#4CAF50',
            },
            // Login styles
            loginContainer: {
              flex: 1,
              justifyContent: 'center',
              alignItems: 'center',
              backgroundColor: '#f5f5f5',
              padding: 20,
            },
            logoContainer: {
              alignItems: 'center',
              marginBottom: 40,
            },
            logoText: {
              fontSize: 28,
              fontWeight: 'bold',
              color: '#4CAF50',
              marginTop: 10,
            },
            formContainer: {
              width: '100%',
              maxWidth: 300,
            },
            input: {
              backgroundColor: 'white',
              padding: 15,
              borderRadius: 5,
              marginBottom: 15,
              borderWidth: 1,
              borderColor: '#ddd',
            },
            errorText: {
              color: 'red',
              marginBottom: 15,
              textAlign: 'center',
            },
            loginButton: {
              backgroundColor: '#4CAF50',
              padding: 15,
              borderRadius: 5,
              alignItems: 'center',
            },
            loginButtonText: {
              color: 'white',
              fontWeight: 'bold',
              fontSize: 16,
            },
            // Sync styles
            syncContainer: {
              backgroundColor: '#e8f5e9',
              padding: 10,
              margin: 16,
              borderRadius: 5,
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              flexWrap: 'wrap',
            },
            syncText: {
              fontSize: 12,
              color: '#2e7d32',
              marginRight: 5,
            },
            syncButton: {
              backgroundColor: '#4CAF50',
              paddingHorizontal: 10,
              paddingVertical: 5,
              borderRadius: 15,
            },
            syncButtonDisabled: {
              backgroundColor: '#9E9E9E',
            },
            syncButtonText: {
              color: 'white',
              fontSize: 12,
            },
          });
          EOF

      - name: üñºÔ∏è Garantir assets do app
        run: |
          mkdir -p assets
          if [ ! -f assets/icon.png ]; then
            # Criando √≠cones v√°lidos com cores s√≥lidas simples (evita erros de CRC)
            convert -size 1024x1024 xc:#4CAF50 assets/icon.png || {
              # Fallback se o ImageMagick n√£o estiver dispon√≠vel
              echo "Instalando ImageMagick..."
              sudo apt-get update -qq && sudo apt-get install -y imagemagick
              convert -size 1024x1024 xc:#4CAF50 assets/icon.png
            }
            
            # Copiando para outros √≠cones necess√°rios
            cp assets/icon.png assets/adaptive-icon.png
            cp assets/icon.png assets/splash.png
            cp assets/icon.png assets/favicon.png
            
            echo "‚úÖ √çcones criados com sucesso"
            ls -la assets/
          fi
          
      - name: üîß Preparar ambiente Android
        run: |
          echo "üîß Instalando depend√™ncias do Android SDK..."
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            file \
            curl \
            sudo \
            git
          
          # Corrigir conflito entre ANDROID_HOME e ANDROID_SDK_ROOT
          echo "Resolvendo conflito de vari√°veis do Android SDK..."
          
          # Unificar SDK path - usar o padr√£o do runner
          export ANDROID_HOME=/usr/local/lib/android/sdk
          export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
          
          # Adicionar ao GITHUB_ENV para persistir em todos os passos
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools" >> $GITHUB_ENV
          
          # Verificar as vari√°veis configuradas
          echo "SDK Path configurado: $ANDROID_HOME"
          ls -la $ANDROID_HOME || echo "Diret√≥rio SDK n√£o encontrado"
          
          # Instalar ou atualizar SDK para vers√£o 29
          echo "Verificando e instalando SDK 29 se necess√°rio..."
          mkdir -p $ANDROID_HOME/licenses/
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_HOME/licenses/android-sdk-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > $ANDROID_HOME/licenses/android-sdk-license
          
          # Instalar componentes espec√≠ficos do SDK 29
          echo y | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-29" "build-tools;29.0.2"
          
          # Confirmar instala√ß√£o
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep "29"
          
          # Instalar Android build tools necess√°rios
          sudo npm install -g turtle-cli --unsafe-perm

      - name: üìù Garantir app.json
        run: |
          cat > app.json << 'EOF'
          {
            "expo": {
              "name": "Corte de Matos",
              "slug": "corte-matos-app",
              "version": "1.1.0",
              "orientation": "portrait",
              "icon": "./assets/icon.png",
              "userInterfaceStyle": "light",
              "splash": {
                "image": "./assets/splash.png",
                "resizeMode": "contain",
                "backgroundColor": "#4CAF50"
              },
              "assetBundlePatterns": [
                "**/*"
              ],
              "android": {
                "adaptiveIcon": {
                  "foregroundImage": "./assets/adaptive-icon.png",
                  "backgroundColor": "#4CAF50"
                },
                "package": "com.managematos.cortepoda",
                "versionCode": 6,
                "compileSdkVersion": 29,
                "targetSdkVersion": 29,
                "permissions": []
              },
              "plugins": [
                [
                  "expo-build-properties",
                  {
                    "android": {
                      "compileSdkVersion": 29,
                      "targetSdkVersion": 29,
                      "buildToolsVersion": "29.0.3"
                    }
                  }
                ]
              ],
              "extra": {
                "eas": {
                  "projectId": "cortematos"
                }
              },
              "updates": {
                "fallbackToCacheTimeout": 0,
                "enabled": false
              },
              "experiments": {
                "tsconfigPaths": true
              }
            }
          }
          EOF

      - name: üìù Garantir babel.config.js
        run: |
          cat > babel.config.js << 'EOF'
          module.exports = function(api) {
            api.cache(true);
            return {
              presets: ['babel-preset-expo'],
            };
          };
          EOF
      
      - name: üõ†Ô∏è Preparar e reparar prebuild manualmente
        run: |
          echo "üõ†Ô∏è Preparando prebuild manualmente para evitar problemas de CRC..."
          
          # Verificar se o diret√≥rio android existe e remov√™-lo se necess√°rio
          if [ -d "android" ]; then
            echo "Removendo diret√≥rio android existente..."
            rm -rf android
          fi
          
          # Verificar se o diret√≥rio ios existe e remov√™-lo se necess√°rio
          if [ -d "ios" ]; then
            echo "Removendo diret√≥rio ios existente..."
            rm -rf ios
          fi
          
          # Corrigir potenciais problemas de depend√™ncias
          echo "Instalando depend√™ncias espec√≠ficas para prebuild..."
          npm install --save-dev @babel/core@^7.20.0 babel-preset-expo@latest
          
          # Verificar a estrutura e permiss√µes das pastas de assets
          echo "Verificando e corrigindo estrutura de assets..."
          chmod -R 755 assets
          
          # Criar metro.config.js para garantir configura√ß√£o correta
          cat > metro.config.js << 'EOF'
          const { getDefaultConfig } = require('@expo/metro-config');
          const defaultConfig = getDefaultConfig(__dirname);
          
          defaultConfig.resolver.assetExts.push('bin');
          
          module.exports = defaultConfig;
          EOF
          
          # Criar arquivo gradle.properties personalizado para corrigir o erro do SoftwareComponent
          mkdir -p android
          cat > android/gradle.properties << 'EOF'
          # Project-wide Gradle settings
          org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          android.nonTransitiveRClass=true

          # Solucionar erro de "SoftwareComponent named 'release' not found"
          android.disableAutomaticComponentCreation=true
          EOF
          
          # Criar arquivo build.gradle personalizado para o app (ser√° usado ap√≥s o prebuild)
          mkdir -p android/app
          cat > android/app/build.gradle.template << 'EOF'
          // Este arquivo ser√° usado para substituir configura√ß√µes problem√°ticas no build.gradle gerado
          apply plugin: "com.android.application"

          import com.android.build.OutputFile
          import org.apache.tools.ant.taskdefs.condition.Os

          /**
           * Defini√ß√£o do patch para o build.gradle gerado pelo Expo
           * Este c√≥digo substitui configura√ß√µes problem√°ticas no build.gradle gerado
           */

          android {
            namespace "com.managematos.cortepoda"
            compileSdkVersion 29
            buildToolsVersion "29.0.3"
            ndkVersion "21.4.7075529"

            compileOptions {
              sourceCompatibility JavaVersion.VERSION_1_8
              targetCompatibility JavaVersion.VERSION_1_8
            }

            defaultConfig {
              applicationId "com.managematos.cortepoda"
              minSdkVersion 21
              targetSdkVersion 29
              versionCode 1
              versionName "1.0.0"
            }

            signingConfigs {
              release {
                if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                  storeFile file(MYAPP_UPLOAD_STORE_FILE)
                  storePassword MYAPP_UPLOAD_STORE_PASSWORD
                  keyAlias MYAPP_UPLOAD_KEY_ALIAS
                  keyPassword MYAPP_UPLOAD_KEY_PASSWORD
                }
              }
            }

            buildTypes {
              release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
                signingConfig signingConfigs.debug
              }
            }
          }

          dependencies {
            implementation 'com.facebook.react:react-android:+'
            implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
          }
          EOF
          
          echo "Prebuild manual conclu√≠do."
          ls -la

      - name: üî® Build Corte de Matos APK
        run: |
          echo "üî® Build APK completo do Corte de Matos..."
          
          # Verificar ambiente Android antes do build
          echo "Verificando configura√ß√£o do ambiente Android:"
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          
          # Garantir que ambas as vari√°veis apontem para o mesmo local
          if [ "$ANDROID_HOME" != "$ANDROID_SDK_ROOT" ]; then
            echo "ATEN√á√ÉO: ANDROID_HOME e ANDROID_SDK_ROOT s√£o diferentes."
            echo "Corrigindo para garantir consist√™ncia..."
            export ANDROID_SDK_ROOT=$ANDROID_HOME
            echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          fi
          
          # Verificar exist√™ncia do diret√≥rio
          if [ ! -d "$ANDROID_HOME" ]; then
            echo "AVISO: Diret√≥rio ANDROID_HOME n√£o encontrado, usando o padr√£o do runner."
            export ANDROID_HOME=/usr/local/lib/android/sdk
            export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
            echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
            echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          fi
          
          # Criar um diret√≥rio tempor√°rio para o build
          mkdir -p build-output
          
          # Verificar arquivos cr√≠ticos
          ls -la
          echo "Verificando arquivos de configura√ß√£o:"
          ls -la *.json
          
          # Garantir que n√£o estamos usando vers√µes incompat√≠veis
          echo "Adicionando override para evitar problemas de incompatibilidade..."
          npm install --save @babel/runtime@latest
          
          # Exportar vari√°veis para evitar problemas com prebuild
          export EAS_NO_VCS=1
          export CI=1
          export EAS_LOCAL_BUILD_SKIP_CLEANUP=1
          export EAS_LOCAL_BUILD_ARTIFACTS_DIR=./build-output
          
          echo "Usando profile de build: ${{ github.event.inputs.profile || 'preview' }}"
          
          # Configura√ß√£o adicional para depura√ß√£o
          echo "Habilitando logs detalhados para depura√ß√£o de problemas de inicializa√ß√£o"
          cat > metro.config.js << 'EOF'
          const { getDefaultConfig } = require('@expo/metro-config');
          const defaultConfig = getDefaultConfig(__dirname);
          
          defaultConfig.resolver.assetExts.push('bin');
          defaultConfig.resolver.sourceExts = ['jsx', 'js', 'ts', 'tsx', 'json'];
          
          // Aumentar tempo limite para evitar problemas de timeout
          defaultConfig.server.timeoutForBundling = 60000;
          
          module.exports = defaultConfig;
          EOF
          
          # Gerar o projeto nativo manualmente
          echo "Executando prebuild manual com expo..."
          npx expo prebuild --platform android --clean --no-install
          
          # Verificar arquivos cr√≠ticos
          ls -la
          echo "Verificando arquivos de configura√ß√£o:"
          ls -la *.json
          
          # Exportar vari√°veis para evitar problemas com prebuild
          export EAS_NO_VCS=1
          export CI=1
          export EAS_LOCAL_BUILD_SKIP_CLEANUP=1
          export EAS_LOCAL_BUILD_ARTIFACTS_DIR=./build-output
          
          echo "Usando profile de build: ${{ github.event.inputs.profile || 'preview' }}"
          
          # Gerar o projeto nativo manualmente
          echo "Executando prebuild manual com expo..."
          npx expo prebuild --platform android --clean
          
          # Verificar se o prebuild foi bem sucedido
          if [ -d "android" ]; then
            echo "Prebuild bem sucedido! Prosseguindo com o build..."
            
            # Verificar e garantir que gradle.properties tem a configura√ß√£o correta
            echo "Verificando gradle.properties para garantir configura√ß√£o correta..."
            if [ -f "android/gradle.properties" ]; then
              # Garantir que android.disableAutomaticComponentCreation=true est√° presente
              if ! grep -q "android.disableAutomaticComponentCreation=true" android/gradle.properties; then
                echo "Adicionando android.disableAutomaticComponentCreation=true ao gradle.properties"
                echo "android.disableAutomaticComponentCreation=true" >> android/gradle.properties
              fi
              
              # Adicionar configura√ß√µes para evitar problemas de mem√≥ria
              echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError" >> android/gradle.properties
              echo "org.gradle.daemon=true" >> android/gradle.properties
              echo "org.gradle.parallel=true" >> android/gradle.properties
              echo "org.gradle.configureondemand=true" >> android/gradle.properties
            fi
            
            # Aplicar template de build.gradle personalizado se existir
            if [ -f "android/app/build.gradle.template" ] && [ -f "android/app/build.gradle" ]; then
              echo "Aplicando template de build.gradle personalizado..."
              cp android/app/build.gradle.template android/app/build.gradle
            fi
            
            # Verificar build.gradle e adicionar configura√ß√µes necess√°rias
            if [ -f "android/app/build.gradle" ]; then
              echo "Verificando e corrigindo build.gradle..."
              
              # Adicionar configura√ß√£o para multidex se necess√°rio
              if ! grep -q "multiDexEnabled" android/app/build.gradle; then
                sed -i '/defaultConfig {/a\\        multiDexEnabled true' android/app/build.gradle
              fi
              
              # Adicionar depend√™ncia multidex
              if ! grep -q "androidx.multidex:multidex" android/app/build.gradle; then
                sed -i '/dependencies {/a\\    implementation "androidx.multidex:multidex:2.0.1"' android/app/build.gradle
              fi
            fi
            
            # Criar arquivo de configura√ß√£o MainApplication para capturar erros
            mkdir -p android/app/src/main/java/com/managematos/cortepoda
            cat > android/app/src/main/java/com/managematos/cortepoda/MainApplication.java.new << 'EOF'
            package com.managematos.cortepoda;

            import android.app.Application;
            import android.content.Context;
            import android.util.Log;
            import androidx.multidex.MultiDex;

            import com.facebook.react.PackageList;
            import com.facebook.react.ReactApplication;
            import com.facebook.react.ReactInstanceManager;
            import com.facebook.react.ReactNativeHost;
            import com.facebook.react.ReactPackage;
            import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint;
            import com.facebook.react.defaults.DefaultReactNativeHost;
            import com.facebook.soloader.SoLoader;

            import expo.modules.ApplicationLifecycleDispatcher;
            import expo.modules.ReactNativeHostWrapper;

            import java.lang.reflect.InvocationTargetException;
            import java.util.List;

            public class MainApplication extends Application implements ReactApplication {
              private static final String TAG = "MainApplication";
              
              private final ReactNativeHost mReactNativeHost = new ReactNativeHostWrapper(
                this,
                new DefaultReactNativeHost(this) {
                  @Override
                  public boolean getUseDeveloperSupport() {
                    return false;
                  }

                  @Override
                  protected List<ReactPackage> getPackages() {
                    @SuppressWarnings("UnnecessaryLocalVariable")
                    List<ReactPackage> packages = new PackageList(this).getPackages();
                    // Packages that cannot be autolinked yet can be added manually here
                    return packages;
                  }

                  @Override
                  protected String getJSMainModuleName() {
                    return "index";
                  }

                  @Override
                  protected boolean isNewArchEnabled() {
                    return false;
                  }

                  @Override
                  protected Boolean isHermesEnabled() {
                    return false;
                  }
                }
              );

              @Override
              public ReactNativeHost getReactNativeHost() {
                return mReactNativeHost;
              }

              @Override
              public void onCreate() {
                super.onCreate();
                
                try {
                  // Inicializa√ß√£o para capturar erros
                  Thread.setDefaultUncaughtExceptionHandler(
                    (thread, throwable) -> {
                      Log.e(TAG, "ERRO FATAL: " + throwable.getMessage(), throwable);
                    }
                  );
                  
                  SoLoader.init(this, /* native exopackage */ false);
                  
                  // Iniciar React Native
                  initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
                  ApplicationLifecycleDispatcher.onApplicationCreate(this);
                } catch (Exception e) {
                  Log.e(TAG, "Erro na inicializa√ß√£o do app: " + e.getMessage(), e);
                }
              }

              @Override
              protected void attachBaseContext(Context base) {
                super.attachBaseContext(base);
                // Suporte para multidex
                MultiDex.install(this);
              }

              @Override
              public void onConfigurationChanged(android.content.res.Configuration newConfig) {
                super.onConfigurationChanged(newConfig);
                ApplicationLifecycleDispatcher.onConfigurationChanged(this, newConfig);
              }

            // M√©todo para inicializar Flipper
              private static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {
                // No SDK 29, algumas classes do Flipper podem causar problemas
                // Vamos usar try-catch para evitar erros de inicializa√ß√£o
                try {
                  Class<?> aClass = Class.forName("com.managematos.cortepoda.ReactNativeFlipper");
                  aClass
                      .getMethod("initializeFlipper", Context.class, ReactInstanceManager.class)
                      .invoke(null, context, reactInstanceManager);
                } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
                  Log.e(TAG, "Erro ao inicializar Flipper", e);
                }
              }
            }
            EOF
            
            # Tentar substituir o MainApplication.java
            if [ -f android/app/src/main/java/com/managematos/cortepoda/MainApplication.java ]; then
              echo "Substituindo MainApplication.java com vers√£o melhorada..."
              cp android/app/src/main/java/com/managematos/cortepoda/MainApplication.java.new android/app/src/main/java/com/managematos/cortepoda/MainApplication.java
            fi
            
            # Verificar se precisamos ajustar o gradlew
            if [ -f "android/gradlew" ]; then
              echo "Corrigindo permiss√µes do gradlew..."
              chmod +x android/gradlew
            fi
            
            # Construir APK diretamente com gradlew
            echo "Construindo APK diretamente com gradlew..."
            cd android
            # Garantir que o gradle wrapper tenha permiss√£o de execu√ß√£o
            chmod +x ./gradlew
            
            # Limpar builds anteriores
            ./gradlew clean
            
            # Mostra as vari√°veis de ambiente do Android para diagn√≥stico
            echo "Vari√°veis de ambiente Android no momento do build:"
            env | grep ANDROID
            
            # Construir o APK com informa√ß√µes detalhadas e stacktrace para diagn√≥stico
            ./gradlew assembleRelease --info --stacktrace
            
            # Verificar se o APK foi gerado
            if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
              echo "Build com gradlew bem sucedido!"
              mkdir -p ../build-output
              cp app/build/outputs/apk/release/app-release.apk ../build-output/app.apk
              cd ..
            else
              echo "Build com gradlew falhou."
              cd ..
            fi
          else
            echo "Prebuild falhou! Tentando estrat√©gia alternativa..."
            
            # Tentar exportar para um APK usando outra abordagem
            echo "Exportando com abordagem alternativa..."
            npm install -g sharp-cli
            npx expo export:embed --platform android || npx expo export --platform android
            
            # Verificar se encontramos algum arquivo APK gerado
            find . -name "*.apk" -type f > build-output/apk-locations.txt
            if [ -s build-output/apk-locations.txt ]; then
              echo "APKs encontrados em outros locais:"
              cat build-output/apk-locations.txt
              
              # Copiar o primeiro APK encontrado para build-output
              first_apk=$(head -n 1 build-output/apk-locations.txt)
              if [ -n "$first_apk" ]; then
                cp "$first_apk" build-output/app.apk
                echo "APK recuperado e copiado para build-output/app.apk"
              fi
            else
              echo "Nenhum APK foi encontrado."
            fi
          fi

      - name: üì§ Upload Build Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: corte-matos-apk
          path: |
            build-output/app.apk
            build-output/*.apk
          if-no-files-found: warn

      - name: ‚úÖ Build Status
        if: always()
        run: |
          echo "Build finalizado."
          echo "Verificando diret√≥rio de sa√≠da:"
          ls -la build-output/ || true
          
          # Caso n√£o exista nenhum APK, criar um relat√≥rio de erro detalhado
          if [ ! -f build-output/app.apk ] && [ ! -f build-output/*.apk ]; then
            echo "AVISO: Nenhum APK foi encontrado no diret√≥rio de build-output."
            echo "Tentando buscar em outros locais potenciais..."
            
            # Verificar locais alternativos onde o APK poderia estar
            find . -name "*.apk" -type f > build-output/apk-locations.txt
            
            # Verificar se algum APK foi encontrado e copiar para build-output
            if [ -s build-output/apk-locations.txt ]; then
              echo "APKs encontrados em outros locais:"
              cat build-output/apk-locations.txt
              
              # Copiar o primeiro APK encontrado para build-output
              first_apk=$(head -n 1 build-output/apk-locations.txt)
              if [ -n "$first_apk" ]; then
                cp "$first_apk" build-output/recovered-app.apk
                echo "APK recuperado e copiado para build-output/recovered-app.apk"
              fi
            else
              echo "Nenhum APK foi encontrado em qualquer lugar."
              
              # Gerar um relat√≥rio de diagn√≥stico detalhado
              {
                echo "===== RELAT√ìRIO DE DIAGN√ìSTICO DE FALHA DE BUILD ====="
                echo "Data e hora: $(date)"
                echo ""
                echo "==== ESTRUTURA DO PROJETO ===="
                find . -type f -name "*.json" | sort
                echo ""
                echo "==== CONTE√öDO DO APP.JSON ===="
                cat app.json
                echo ""
                echo "==== CONTE√öDO DO EAS.JSON ===="
                cat eas.json
                echo ""
                echo "==== LOGS DE ERRO ===="
                find . -name "prebuild-*.log" -o -name "build-*.log" | xargs cat 2>/dev/null || echo "Nenhum arquivo de log encontrado"
                echo ""
                echo "===== FIM DO RELAT√ìRIO ====="
              } > build-output/build-diagnostic.txt
              
              echo "Relat√≥rio de diagn√≥stico gerado em build-output/build-diagnostic.txt"
            fi
          else
            echo "Build bem-sucedido! APK(s) encontrado(s) no diret√≥rio build-output."
            ls -la build-output/*.apk || true
          fi
          
          echo "Baixe o APK nos artefatos."
